{
  "swagger" : "2.0",
  "info" : {
    "description" : "Swagger OpenApi Spec for Camunda REST API.",
    "version" : "v7.8.0",
    "title" : "Camunda REST API",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "camunda.k8s.softwaregroup-bg.com",
  "basePath" : "/engine-rest/engine/default",
  "tags" : [ {
    "name" : "Authorization"
  }, {
    "name" : "Batch"
  }, {
    "name" : "Case Definition"
  }, {
    "name" : "Case Execution"
  }, {
    "name" : "Decision Definition"
  }, {
    "name" : "Deployment"
  }, {
    "name" : "Execution"
  }, {
    "name" : "External"
  }, {
    "name" : "Filter"
  }, {
    "name" : "Group"
  }, {
    "name" : "Identity"
  }, {
    "name" : "Job Definition"
  }, {
    "name" : "Job Execution"
  }, {
    "name" : "Message"
  }, {
    "name" : "Migration"
  }, {
    "name" : "Modification"
  }, {
    "name" : "Process Definition"
  }, {
    "name" : "Process Instance"
  }, {
    "name" : "Task"
  }, {
    "name" : "Tenant"
  }, {
    "name" : "User"
  }, {
    "name" : "Variable"
  } ],
  "schemes" : [ "http" ],
  "paths" : {
    "/authorization" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Queries for a list of authorizations using a list of parameters.",
        "description" : "Queries for a list of authorizations using a list of parameters. The size of the result set can be retrieved by using the Get Authorization Count method.",
        "operationId" : "queryAuthorizations",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "query",
          "description" : "Filter by resource id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of userIds.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of groupIds.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are resourceType and resourceId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by the id of the authorization.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by authorization type. (0=global, 1=grant, 2=revoke). See the User Guide for more information about authorization types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Filter by an integer representation of the resource type. See the User Guide for a list of integer representations of resource types.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "Authorization" ],
        "summary" : "The `/authorization` resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances.",
        "description" : "The `/authorization` resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/authorization` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/authorization/check" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Performs an authorization check for the currently authenticated user.",
        "description" : "Performs an authorization check for the currently authenticated user.",
        "operationId" : "isUserAuthorized",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "permissionName",
          "in" : "query",
          "description" : "Parameter permissionName",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Parameter resourceName",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Parameter resourceType",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "resourceId",
          "in" : "query",
          "description" : "Parameter resourceId",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/AuthorizationCheckResultDto"
            }
          },
          "404" : {
            "description" : "Authorization with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/authorization/count" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Queries for authorizations using a list of parameters and retrieves the count.",
        "description" : "Queries for authorizations using a list of parameters and retrieves the count.",
        "operationId" : "getAuthorizationCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "query",
          "description" : "Filter by resource Id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userIdIn",
          "in" : "query",
          "description" : "Filter by a comma-seperated list of userIds.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupIdIn",
          "in" : "query",
          "description" : "Filter by a comma-seperated list of groupIds.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by the id of the authorization.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by authorization type. (0=global, 1=grant, 2=revoke). See the User Guide for more information about authorization types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Filter by an integer representation of the resource type. See the User Guide for a list of integer representations of resource types.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/authorization/create" : {
      "post" : {
        "tags" : [ "Authorization" ],
        "summary" : "Creates a new authorization.",
        "description" : "Creates a new authorization.",
        "operationId" : "createAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AuthorizationCreateDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/AuthorizationDto"
            }
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to create an instance of this resource. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The authorization could not be updated due to an internal server error. See the Introduction for the error response format."
          }
        }
      }
    },
    "/authorization/{id}" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Retrieves an authorization by id.",
        "description" : "Retrieves an authorization by id.",
        "operationId" : "getAuthorization",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Authorization with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Authorization" ],
        "summary" : "Updates an authorization by id.",
        "description" : "Updates an authorization by id.",
        "operationId" : "updateAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter Authorization",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AuthorizationDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to update this resource. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The authorization with the requested Id cannot be found."
          },
          "500" : {
            "description" : "The authorization could not be updated due to an internal server error. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Authorization" ],
        "summary" : "Deletes an authorization by id.",
        "description" : "Deletes an authorization by id.",
        "operationId" : "deleteAuthorization",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "If the authenticated user is unauthorized to delete the resource instance. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Authorization cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "Authorization" ],
        "summary" : "The `/authorization` resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances.",
        "description" : "The `/authorization` resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/authorization` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/batch" : {
      "get" : {
        "tags" : [ "Batch" ],
        "summary" : "Queries for batches that fulfill given parameters.",
        "description" : "Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type.  The size of the result set can be retrieved by using the Get Batch Count method.",
        "operationId" : "getBatches",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include batches which belong to no tenant. Value can effectively only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are batchId and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "batchId",
          "in" : "query",
          "description" : "Filter by batch id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by batch type. See the User Guide for more information about batch types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "A Boolean value which indicates whether only active or suspended batches should be included. When the value is set to true, only suspended batches will be returned and when the value is set to false, only active batches will be returned.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }
      }
    },
    "/batch/count" : {
      "get" : {
        "tags" : [ "Batch" ],
        "summary" : "Requests the number of batches that fulfill the query criteria.",
        "description" : "Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the Get Batches method.",
        "operationId" : "getBatchesCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include batches which belong to no tenant. Value can effectively only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "batchId",
          "in" : "query",
          "description" : "Filter by batch id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by batch type. See the User Guide for more information about batch types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "A Boolean value which indicates whether only active or suspended batches should be included. When the value is set to true, only suspended batches will be returned and when the value is set to false, only active batches will be returned.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/batch/statistics" : {
      "get" : {
        "tags" : [ "Batch" ],
        "summary" : "Queries for batch statistics that fulfill given parameters.",
        "description" : "Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type.  The size of the result set can be retrieved by using the Get Batch Statistics Count method.",
        "operationId" : "getBatchStatistics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include batches which belong to no tenant. Value can effectively only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are batchId and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "batchId",
          "in" : "query",
          "description" : "Filter by batch id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by batch type. See the User Guide for more information about batch types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "A Boolean value which indicates whether only active or suspended batches should be included. When the value is set to true, only suspended batches will be returned and when the value is set to false, only active batches will be returned.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }
      }
    },
    "/batch/statistics/count" : {
      "get" : {
        "tags" : [ "Batch" ],
        "summary" : "Requests the number of batch statistics that fulfill the query criteria.",
        "description" : "Requests the number of batch statistics that fulfill the query criteria.  Takes the same filtering parameters as the Get Batch Statistics method.",
        "operationId" : "getStatisticsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include batches which belong to no tenant. Value can effectively only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "batchId",
          "in" : "query",
          "description" : "Filter by batch id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by batch type. See the User Guide for more information about batch types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "A Boolean value which indicates whether only active or suspended batches should be included. When the value is set to true, only suspended batches will be returned and when the value is set to false, only active batches will be returned.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/batch/{id}" : {
      "get" : {
        "tags" : [ "Batch" ],
        "summary" : "Retrieves a batch by id, according to the `Batch` interface in the engine.",
        "description" : "Retrieves a batch by id, according to the `Batch` interface in the engine.",
        "operationId" : "getBatch",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter batchId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Batch" ],
        "summary" : "Deletes a batch by id, including all related jobs and job definitions.",
        "description" : "Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.",
        "operationId" : "deleteBatch",
        "parameters" : [ {
          "name" : "cascade",
          "in" : "query",
          "description" : "Parameter cascade",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter batchId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Deployment with id 'aDeploymentId' does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/batch/{id}/suspended" : {
      "put" : {
        "tags" : [ "Batch" ],
        "summary" : "Activates or suspends a batch by id.",
        "description" : "Activates or suspends a batch by id.",
        "operationId" : "updateBatchSuspensionState",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter suspensionState",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SuspensionStateDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter batchId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if the batch cannot be suspended or activated. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Queries for case definitions that fulfill given parameters.",
        "description" : "Queries for case definitions that fulfill given parameters. Parameters may be the properties of case definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Case Definition Count method.",
        "operationId" : "getCaseDefinitions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceNameLike",
          "in" : "query",
          "description" : "Filter by names of those case definition resources that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionIdIn",
          "in" : "query",
          "description" : "Filter by case definition ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionId",
          "in" : "query",
          "description" : "Filter by case definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter by the name of the case definition resource. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeCaseDefinitionsWithoutTenantId",
          "in" : "query",
          "description" : "Include case definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Filter by case definition version.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryLike",
          "in" : "query",
          "description" : "Filter by case definition categories that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by case definition names that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "latestVersion",
          "in" : "query",
          "description" : "Only include those case definitions that are latest versions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A case definition must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Filter by the deployment the id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyLike",
          "in" : "query",
          "description" : "Filter by case definition keys that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by case definition name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include case definitions which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are category, key, id, name, version, deploymentId and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Filter by case definition category. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "Filter by case definition key, i.e., the id in the CMMN XML. Exact match.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/count" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Requests the number of case definitions that fulfill the query criteria.",
        "description" : "Requests the number of case definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Case Definitions method.",
        "operationId" : "getCaseDefinitionsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceNameLike",
          "in" : "query",
          "description" : "Filter by names of those case definition resources that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionIdIn",
          "in" : "query",
          "description" : "Filter by case definition ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionId",
          "in" : "query",
          "description" : "Filter by case definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter by the name of the case definition resource. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeCaseDefinitionsWithoutTenantId",
          "in" : "query",
          "description" : "Include case definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Filter by case definition version.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryLike",
          "in" : "query",
          "description" : "Filter by case definition categories that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by case definition names that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "latestVersion",
          "in" : "query",
          "description" : "Only include those case definitions that are latest versions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A case definition must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Filter by the deployment the id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyLike",
          "in" : "query",
          "description" : "Filter by case definition keys that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by case definition name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include case definitions which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Filter by case definition category. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "Filter by case definition key, i.e., the id in the CMMN XML. Exact match.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Retrieves a case definition according to the `CaseDefinition` interface in the engine.",
        "description" : "Retrieves a case definition according to the `CaseDefinition` interface in the engine.",
        "operationId" : "getCaseDefinitionByKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/create" : {
      "post" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Instantiates a given case definition.",
        "description" : "Instantiates a given case definition. Case variables and business key may be supplied in the request body.",
        "operationId" : "createCaseInstance",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCaseInstanceDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CaseInstanceDto"
            }
          },
          "400" : {
            "description" : "The case instance could not be created due to an invalid variable value, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The case execution cannot be instantiated because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The case instance could not be created due to a nonexistent case definition. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The case instance could not be created successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/diagram" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Retrieves the diagram of a case definition.",
        "description" : "Retrieves the diagram of a case definition.",
        "operationId" : "getCaseDefinitionDiagram",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "204" : {
            "description" : "The case definition doesn't have an associated diagram."
          },
          "404" : {
            "description" : "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/history-time-to-live" : {
      "put" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Updates history time to live for case definition with given id.",
        "description" : "Updates history time to live for case definition with given id. The field is used within History cleanup.",
        "operationId" : "updateCaseHistoryTimeToLive",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter historyTimeToLiveDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HistoryTimeToLiveDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid."
          },
          "404" : {
            "description" : "case definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Retrieves a case definition according to the `CaseDefinition` interface in the engine.",
        "description" : "Retrieves a case definition according to the `CaseDefinition` interface in the engine.",
        "operationId" : "getCaseDefinitionByKeyAndTenantId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}/create" : {
      "post" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Instantiates a given case definition.",
        "description" : "Instantiates a given case definition. Case variables and business key may be supplied in the request body.",
        "operationId" : "createCaseInstanceTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCaseInstanceDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CaseInstanceDto"
            }
          },
          "400" : {
            "description" : "The case instance could not be created due to an invalid variable value, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The case execution cannot be instantiated because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The case instance could not be created due to a nonexistent case definition. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The case instance could not be created successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}/diagram" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Retrieves the diagram of a case definition.",
        "description" : "Retrieves the diagram of a case definition.",
        "operationId" : "getCaseDefinitionDiagramTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "204" : {
            "description" : "The case definition doesn't have an associated diagram."
          },
          "404" : {
            "description" : "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}/history-time-to-live" : {
      "put" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Updates history time to live for case definition with given id.",
        "description" : "Updates history time to live for case definition with given id. The field is used within History cleanup.",
        "operationId" : "updateCaseHistoryTimeToLiveTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter historyTimeToLiveDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HistoryTimeToLiveDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid."
          },
          "404" : {
            "description" : "case definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}/xml" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Retrieves the CMMN XML of a case definition.",
        "description" : "Retrieves the CMMN XML of a case definition.",
        "operationId" : "getCaseDefinitionCmmnXmlTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CaseDefinitionDiagramDto"
            }
          },
          "404" : {
            "description" : "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/xml" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Retrieves the CMMN XML of a case definition.",
        "description" : "Retrieves the CMMN XML of a case definition.",
        "operationId" : "getCaseDefinitionCmmnXml",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter caseDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CaseDefinitionDiagramDto"
            }
          },
          "404" : {
            "description" : "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/{id}" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Retrieves a case definition according to the `CaseDefinition` interface in the engine.",
        "description" : "Retrieves a case definition according to the `CaseDefinition` interface in the engine.",
        "operationId" : "getCaseDefinitionById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/{id}/create" : {
      "post" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Instantiates a given case definition.",
        "description" : "Instantiates a given case definition. Case variables and business key may be supplied in the request body.",
        "operationId" : "createCaseInstanceId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCaseInstanceDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CaseInstanceDto"
            }
          },
          "400" : {
            "description" : "The case instance could not be created due to an invalid variable value, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The case execution cannot be instantiated because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The case instance could not be created due to a nonexistent case definition. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The case instance could not be created successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/{id}/diagram" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Retrieves the diagram of a case definition.",
        "description" : "Retrieves the diagram of a case definition.",
        "operationId" : "getCaseDefinitionDiagramId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "204" : {
            "description" : "The case definition doesn't have an associated diagram."
          },
          "404" : {
            "description" : "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/{id}/history-time-to-live" : {
      "put" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Updates history time to live for case definition with given id.",
        "description" : "Updates history time to live for case definition with given id. The field is used within History cleanup.",
        "operationId" : "updateHistoryTimeToLiveId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter historyTimeToLiveDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HistoryTimeToLiveDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid."
          },
          "404" : {
            "description" : "case definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/{id}/xml" : {
      "get" : {
        "tags" : [ "Case Definition" ],
        "summary" : "Retrieves the CMMN XML of a case definition.",
        "description" : "Retrieves the CMMN XML of a case definition.",
        "operationId" : "getCaseDefinitionCmmnXmlId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CaseDefinitionDiagramDto"
            }
          },
          "404" : {
            "description" : "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution" : {
      "get" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Queries for case executions that fulfill given parameters.",
        "description" : "Queries for case executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of case executions. The size of the result set can be retrieved by using the Get Case Execution Count method.",
        "operationId" : "getCaseExecutions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "caseExecutionId",
          "in" : "query",
          "description" : "Filter by a case execution id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variables",
          "in" : "query",
          "description" : "Only include case executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionId",
          "in" : "query",
          "description" : "Filter by the case definition the case executions run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceId",
          "in" : "query",
          "description" : "Filter by a case instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the case definition the case executions run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repetition",
          "in" : "query",
          "description" : "Only include case executions which are repetitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "required",
          "in" : "query",
          "description" : "Only include required case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "enabled",
          "in" : "query",
          "description" : "Only include enabled case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityId",
          "in" : "query",
          "description" : "Filter by the id of the activity the case execution currently executes.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A case execution must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repeatable",
          "in" : "query",
          "description" : "Only include repeatable case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "businessKey",
          "in" : "query",
          "description" : "Filter by the business key of the case instances the case executions belong to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceVariables",
          "in" : "query",
          "description" : "Only include case executions that belong to a case instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "disabled",
          "in" : "query",
          "description" : "Only include disabled case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are caseExecutionId, caseDefinitionKey, caseDefinitionId and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Queries for case executions that fulfill given parameters through a JSON object.",
        "description" : "Queries for case executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Case Executions method because it allows filtering by multiple case variables of types `String`, `Number` or `Boolean`.",
        "operationId" : "queryCaseExecutions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CaseExecutionQueryDto"
          }
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/count" : {
      "get" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Queries for the number of case executions that fulfill given parameters.",
        "description" : "Queries for the number of case executions that fulfill given parameters. Takes the same parameters as the Get Case Executions method.",
        "operationId" : "getCaseExecutionsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "caseExecutionId",
          "in" : "query",
          "description" : "Filter by a case execution id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variables",
          "in" : "query",
          "description" : "Only include case executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionId",
          "in" : "query",
          "description" : "Filter by the case definition the case executions run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceId",
          "in" : "query",
          "description" : "Filter by a case instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the case definition the case executions run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repetition",
          "in" : "query",
          "description" : "Only include case executions which are repetitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "required",
          "in" : "query",
          "description" : "Only include required case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "enabled",
          "in" : "query",
          "description" : "Only include enabled case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityId",
          "in" : "query",
          "description" : "Filter by the id of the activity the case execution currently executes.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A case execution must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repeatable",
          "in" : "query",
          "description" : "Only include repeatable case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "businessKey",
          "in" : "query",
          "description" : "Filter by the business key of the case instances the case executions belong to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceVariables",
          "in" : "query",
          "description" : "Only include case executions that belong to a case instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "disabled",
          "in" : "query",
          "description" : "Only include disabled case executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Query Case Executions Count.",
        "description" : "Query Case Executions Count",
        "operationId" : "queryCaseExecutionsCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/case-execution/{id}" : {
      "get" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Retrieves a case execution by id, according to the `CaseExecution` interface in the engine.",
        "description" : "Retrieves a case execution by id, according to the `CaseExecution` interface in the engine.",
        "operationId" : "getCaseExecution",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Case execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/complete" : {
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "title: \"Complete Case Execution\" weight: 70.",
        "description" : "title: \"Complete Case Execution\" weight: 70",
        "operationId" : "completeCase",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter triggerDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CaseExecutionTriggerDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The state transition is not allowed to be performed, for example when the case execution is enabled or is already completed. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The case execution cannot be completed because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/disable" : {
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Performs a transition from ENABLED state to DISABLED state.",
        "description" : "Performs a transition from ENABLED state to DISABLED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).",
        "operationId" : "disable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter triggerDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CaseExecutionTriggerDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The state transition is not allowed to be performed, for example when the case execution is active or is already disabled. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The case execution cannot be disabled because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/localVariables" : {
      "get" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Retrieves all variables of a given case execution.",
        "description" : "Retrieves all variables of a given case execution.",
        "operationId" : "getVariablesLocal",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "Case execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Updates or deletes the variables in the context of a case execution.",
        "description" : "Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy. Please note: deletion precedes update.",
        "operationId" : "modifyLocalVariables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter patch",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PatchVariablesDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "Update or deletion could not be executed, for example because the case execution does not exist."
          }
        }
      }
    },
    "/case-execution/{id}/localVariables/{varId}" : {
      "get" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Retrieves a variable from the context of a given case execution.",
        "description" : "Retrieves a variable from the context of a given case execution. Does not traverse the parent case execution hierarchy.",
        "operationId" : "getCaseVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deserializeValue",
          "in" : "query",
          "description" : "Parameter deserializeValue",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/VariableValueDto"
            }
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Sets a variable in the context of a given case execution.",
        "description" : "Sets a variable in the context of a given case execution. Update does not propagate upwards in the case execution hierarchy.",
        "operationId" : "putCaseVariable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter variable",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Deletes a variable in the context of a given case execution.",
        "description" : "Deletes a variable in the context of a given case execution. Deletion does not propagate upwards in the case execution hierarchy.",
        "operationId" : "deleteLocalVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          }
        }
      }
    },
    "/case-execution/{id}/localVariables/{varId}/data" : {
      "get" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Retrieves a binary variable from the context of a given case execution.",
        "description" : "Retrieves a binary variable from the context of a given case execution. Does not traverse the parent case execution hierarchy. Applicable for byte array and file variables.",
        "operationId" : "getCaseVariableBinary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Variable with given id exists but is not a binary variable. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "description" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "operationId" : "setCaseLocalBinaryVariable",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter multipartFormData",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormData"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if no filename is set. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/manual-start" : {
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Performs a transition from ENABLED state to ACTIVE state.",
        "description" : "Performs a transition from ENABLED state to ACTIVE state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).",
        "operationId" : "manualStart",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter triggerDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CaseExecutionTriggerDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The state transition is not allowed to be performed, for example when the case execution is disabled or is already active. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The case execution cannot be started because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/reenable" : {
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Performs a transition from DISABLED state to ENABLED state.",
        "description" : "Performs a transition from DISABLED state to ENABLED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).",
        "operationId" : "reenable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter triggerDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CaseExecutionTriggerDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The state transition is not allowed to be performed, for example when the case execution is active or is already enabled. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The case execution cannot be reenabled because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/terminate" : {
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "title: \"Terminate Case Execution\" weight: 90.",
        "description" : "title: \"Terminate Case Execution\" weight: 90",
        "operationId" : "terminate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter triggerDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CaseExecutionTriggerDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The state transition is not allowed to be performed, for example when the case execution is not in the active state. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The case execution cannot be terminated because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/variables" : {
      "get" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Retrieves all variables of a given case execution by id.",
        "description" : "Retrieves all variables of a given case execution by id.",
        "operationId" : "getCaseVariables",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "Case execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Updates or deletes the variables in the context of a case execution.",
        "description" : "Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy. Please note: deletion precedes update.",
        "operationId" : "modifyCaseVariables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter patch",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PatchVariablesDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "Update or deletion could not be executed, for example because the case execution does not exist."
          }
        }
      }
    },
    "/case-execution/{id}/variables/{varId}" : {
      "get" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Retrieves a variable from the context of a given case execution.",
        "description" : "Retrieves a variable from the context of a given case execution. Does not traverse the parent case execution hierarchy.",
        "operationId" : "getExecVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deserializeValue",
          "in" : "query",
          "description" : "Parameter deserializeValue",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/VariableValueDto"
            }
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Sets a variable in the context of a given case execution.",
        "description" : "Sets a variable in the context of a given case execution. Update does not propagate upwards in the case execution hierarchy.",
        "operationId" : "putVariable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter variable",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Deletes a variable in the context of a given case execution.",
        "description" : "Deletes a variable in the context of a given case execution. Deletion does not propagate upwards in the case execution hierarchy.",
        "operationId" : "deleteCaseVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          }
        }
      }
    },
    "/case-execution/{id}/variables/{varId}/data" : {
      "get" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Retrieves a binary variable from the context of a given case execution.",
        "description" : "Retrieves a binary variable from the context of a given case execution. Does not traverse the parent case execution hierarchy. Applicable for byte array and file variables.",
        "operationId" : "getExecutionVariableBinary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Variable with given id exists but is not a binary variable. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Case Execution" ],
        "summary" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "description" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "operationId" : "setCaseBinaryVariable",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter multipartFormData",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormData"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter caseExecutionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if no filename is set. See the Introduction for the error response format."
          }
        }
      }
    },
    "/decision-definition" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Queries for decision definitions that fulfill given parameters.",
        "description" : "Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version.  The size of the result set can be retrieved by using the Get Decision Definition Count method.",
        "operationId" : "getDecisionDefinitions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceNameLike",
          "in" : "query",
          "description" : "Filter by names of those decision definition resources that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "decisionDefinitionIdIn",
          "in" : "query",
          "description" : "Filter by decision definition ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter by the name of the decision definition resource. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Filter by decision definition version.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryLike",
          "in" : "query",
          "description" : "Filter by decision definition categories that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by decision definition names that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeDecisionDefinitionsWithoutTenantId",
          "in" : "query",
          "description" : "Include decision definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "decisionDefinitionId",
          "in" : "query",
          "description" : "Filter by decision definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "latestVersion",
          "in" : "query",
          "description" : "Only include those decision definitions that are latest versions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "decisionRequirementsDefinitionId",
          "in" : "query",
          "description" : "Filter by the id of the decision requirements definition this decision definition belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Filter by the deployment the id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyLike",
          "in" : "query",
          "description" : "Filter by decision definition keys that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by decision definition name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include decision definitions which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are category, key, id, name, version, deploymentId and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Filter by decision definition category. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutDecisionRequirementsDefinition",
          "in" : "query",
          "description" : "Only include decision definitions which does not belongs to any decision requirements definition. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "decisionRequirementsDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the decision requirements definition this decision definition belongs to.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }
      }
    },
    "/decision-definition/count" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Requests the number of decision definitions that fulfill the query criteria.",
        "description" : "Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Decision Definitions method.",
        "operationId" : "getDecisionDefinitionsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceNameLike",
          "in" : "query",
          "description" : "Filter by names of those decision definition resources that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "decisionDefinitionIdIn",
          "in" : "query",
          "description" : "Filter by decision definition ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter by the name of the decision definition resource. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Filter by decision definition version.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryLike",
          "in" : "query",
          "description" : "Filter by decision definition categories that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by decision definition names that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeDecisionDefinitionsWithoutTenantId",
          "in" : "query",
          "description" : "Include decision definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "decisionDefinitionId",
          "in" : "query",
          "description" : "Filter by decision definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "latestVersion",
          "in" : "query",
          "description" : "Only include those decision definitions that are latest versions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "decisionRequirementsDefinitionId",
          "in" : "query",
          "description" : "Filter by the id of the decision requirements definition this decision definition belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Filter by the deployment the id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyLike",
          "in" : "query",
          "description" : "Filter by decision definition keys that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by decision definition name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include decision definitions which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Filter by decision definition category. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutDecisionRequirementsDefinition",
          "in" : "query",
          "description" : "Only include decision definitions which does not belongs to any decision requirements definition. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "decisionRequirementsDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the decision requirements definition this decision definition belongs to.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/decision-definition/key/{key}" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.",
        "description" : "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.",
        "operationId" : "getDecisionDefinitionByKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/decision-definition/key/{key}/diagram" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Retrieves the diagram of a decision definition.",
        "description" : "Retrieves the diagram of a decision definition.",
        "operationId" : "getDecisionDefinitionDiagramKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/decision-definition/key/{key}/evaluate" : {
      "post" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Evaluates a given decision and returns the result.",
        "description" : "Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.",
        "operationId" : "evaluateDecisionKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EvaluateDecisionDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }
      }
    },
    "/decision-definition/key/{key}/history-time-to-live" : {
      "put" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Updates history time to live for decision definition.",
        "description" : "Updates history time to live for decision definition. The field is used within History cleanup.",
        "operationId" : "updateHistoryTimeToLiveTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter historyTimeToLiveDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HistoryTimeToLiveDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid."
          },
          "404" : {
            "description" : "Decision definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.",
        "description" : "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.",
        "operationId" : "getDecisionDefinitionByKeyAndTenantId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}/diagram" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Retrieves the diagram of a decision definition.",
        "description" : "Retrieves the diagram of a decision definition.",
        "operationId" : "getDecisionDefinitionDiagramTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}/evaluate" : {
      "post" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Evaluates a given decision and returns the result.",
        "description" : "Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.",
        "operationId" : "evaluateDecisionTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EvaluateDecisionDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}/history-time-to-live" : {
      "put" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Updates history time to live for decision definition.",
        "description" : "Updates history time to live for decision definition. The field is used within History cleanup.",
        "operationId" : "updateDecisionHistoryTimeToLive",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter historyTimeToLiveDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HistoryTimeToLiveDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid."
          },
          "404" : {
            "description" : "Decision definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}/xml" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Retrieves the DMN XML of a decision definition.",
        "description" : "Retrieves the DMN XML of a decision definition.",
        "operationId" : "getDecisionDefinitionDmnXmlTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DecisionDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/decision-definition/key/{key}/xml" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Retrieves the DMN XML of a decision definition.",
        "description" : "Retrieves the DMN XML of a decision definition.",
        "operationId" : "getDecisionDefinitionDmnXmlKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter decisionDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DecisionDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/decision-definition/{id}" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.",
        "description" : "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.",
        "operationId" : "getDecisionDefinitionById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter decisionDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/decision-definition/{id}/diagram" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Retrieves the diagram of a decision definition.",
        "description" : "Retrieves the diagram of a decision definition.",
        "operationId" : "getDecisionDefinitionDiagram",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter decisionDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/decision-definition/{id}/evaluate" : {
      "post" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Evaluates a given decision and returns the result.",
        "description" : "Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.",
        "operationId" : "evaluateDecision",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EvaluateDecisionDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter decisionDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }
      }
    },
    "/decision-definition/{id}/history-time-to-live" : {
      "put" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Updates history time to live for decision definition.",
        "description" : "Updates history time to live for decision definition. The field is used within History cleanup.",
        "operationId" : "updateHistoryTimeToLiveDecision",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter historyTimeToLiveDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HistoryTimeToLiveDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter decisionDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid."
          },
          "404" : {
            "description" : "Decision definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/decision-definition/{id}/xml" : {
      "get" : {
        "tags" : [ "Decision Definition" ],
        "summary" : "Retrieves the DMN XML of a decision definition.",
        "description" : "Retrieves the DMN XML of a decision definition.",
        "operationId" : "getDecisionDefinitionDmnXml",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter decisionDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DecisionDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/deployment" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "Queries for deployments that fulfill given parameters.",
        "description" : "Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the Get Deployment count method.",
        "operationId" : "getDeployments",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "before",
          "in" : "query",
          "description" : "Restricts to all deployments before the given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "source",
          "in" : "query",
          "description" : "Filter by the deployment source.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by the deployment name. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include deployments which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutSource",
          "in" : "query",
          "description" : "Filter by the deployment source whereby source is equal to null.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeDeploymentsWithoutTenantId",
          "in" : "query",
          "description" : "Include deployments which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are id, name, deploymentTime and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by deployment id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Restricts to all deployments after the given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/count" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "Queries for the number of deployments that fulfill given parameters.",
        "description" : "Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the Get Deployments method.",
        "operationId" : "getDeploymentsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "before",
          "in" : "query",
          "description" : "Restricts to all deployments before the given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "source",
          "in" : "query",
          "description" : "Filter by the deployment source.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by the deployment name. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include deployments which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutSource",
          "in" : "query",
          "description" : "Filter by the deployment source whereby source is equal to null.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeDeploymentsWithoutTenantId",
          "in" : "query",
          "description" : "Include deployments which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are id, name and deploymentTime. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by deployment id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Restricts to all deployments after the given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/create" : {
      "post" : {
        "tags" : [ "Deployment" ],
        "summary" : "Creates a deployment.",
        "description" : "Creates a deployment.Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "createDeployment",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter multipartFormData",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/DeploymentDto"
            }
          }
        }
      }
    },
    "/deployment/{id}" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "Retrieves a deployment by id, according to the `Deployment` interface of the engine.",
        "description" : "Retrieves a deployment by id, according to the `Deployment` interface of the engine.",
        "operationId" : "getDeployment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter deploymentId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Deployment with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Deployment" ],
        "summary" : "Deletes a deployment by id.",
        "description" : "Deletes a deployment by id.",
        "operationId" : "deleteDeployment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter deploymentId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "skipIoMappings",
          "in" : "query",
          "description" : "true, if all input/output mappings should not be invoked.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "cascade",
          "in" : "query",
          "description" : "true, if all process instances, historic process instances and jobs for this deployment should be deleted.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "skipCustomListeners",
          "in" : "query",
          "description" : "true, if only the built-in ExecutionListeners should be notified with the end event.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Deployment with id 'aDeploymentId' does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/{id}/redeploy" : {
      "post" : {
        "tags" : [ "Deployment" ],
        "summary" : "Re-deploys an existing deployment.",
        "description" : "Re-deploys an existing deployment.The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "redeploy",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter redeployment",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RedeploymentDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter deploymentId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/DeploymentDto"
            }
          },
          "404" : {
            "description" : "Deployment or a deployment resource for the given deployment does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/{id}/resources" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "Retrieves all deployment resources of a given deployment.",
        "description" : "Retrieves all deployment resources of a given deployment.",
        "operationId" : "getDeploymentResources",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter deploymentId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Deployment resources for the given deployment do not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/{id}/resources/{resourceId}" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "Retrieves a deployment resource by resource id for the given deployment.",
        "description" : "Retrieves a deployment resource by resource id for the given deployment.",
        "operationId" : "getDeploymentResource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "Parameter resourceId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter deploymentId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/DeploymentResourceDto"
            }
          },
          "404" : {
            "description" : "Deployment Resource with given resource id or deployment id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/{id}/resources/{resourceId}/data" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "Retrieves the binary content of a deployment resource for the given deployment by id.",
        "description" : "Retrieves the binary content of a deployment resource for the given deployment by id.",
        "operationId" : "getDeploymentResourceData",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "Parameter resourceId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter deploymentId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful. The media type of the response depends on the filename. For example a process.bpmn resource will have the media type application/xml. If the filetype is unknown it defaults to application/octet-stream."
          },
          "404" : {
            "description" : "Deployment Resource with given resource id or deployment id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution" : {
      "get" : {
        "tags" : [ "Execution" ],
        "summary" : "Queries for the executions that fulfill given parameters.",
        "description" : "Queries for the executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the Get Execution Count method.",
        "operationId" : "getExecutions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by the process definition the executions run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceId",
          "in" : "query",
          "description" : "Filter by the id of the process instance the execution belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variables",
          "in" : "query",
          "description" : "Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessage",
          "in" : "query",
          "description" : "Filter by the incident message. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentType",
          "in" : "query",
          "description" : "Filter by the incident type. See the User Guide for a list of incident types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "signalEventSubscriptionName",
          "in" : "query",
          "description" : "Select only those executions that expect a signal of the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the process definition the executions run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "messageEventSubscriptionName",
          "in" : "query",
          "description" : "Select only those executions that expect a message of the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityId",
          "in" : "query",
          "description" : "Filter by the id of the activity the execution currently executes.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "businessKey",
          "in" : "query",
          "description" : "Filter by the business key of the process instances the executions belong to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are instanceId, definitionKey, definitionId and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentId",
          "in" : "query",
          "description" : "Filter by the incident id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processVariables",
          "in" : "query",
          "description" : "Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessageLike",
          "in" : "query",
          "description" : "Filter by the incident message that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Execution" ],
        "summary" : "Queries for executions that fulfill given parameters through a JSON object.",
        "description" : "Queries for executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Executions method because it allows to filter by multiple instance and execution variables of types `String`, `Number` or `Boolean`.",
        "operationId" : "queryExecutions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExecutionQueryDto"
          }
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/count" : {
      "get" : {
        "tags" : [ "Execution" ],
        "summary" : "Queries for the number of executions that fulfill given parameters.",
        "description" : "Queries for the number of executions that fulfill given parameters. Takes the same parameters as the Get Executions method.",
        "operationId" : "getExecutionsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by the process definition the executions run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceId",
          "in" : "query",
          "description" : "Filter by the id of the process instance the execution belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variables",
          "in" : "query",
          "description" : "Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessage",
          "in" : "query",
          "description" : "Filter by the incident message. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentType",
          "in" : "query",
          "description" : "Filter by the incident type. See the User Guide for a list of incident types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "signalEventSubscriptionName",
          "in" : "query",
          "description" : "Select only those executions that expect a signal of the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended executions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the process definition the executions run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "messageEventSubscriptionName",
          "in" : "query",
          "description" : "Select only those executions that expect a message of the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityId",
          "in" : "query",
          "description" : "Filter by the id of the activity the execution currently executes.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "businessKey",
          "in" : "query",
          "description" : "Filter by the business key of the process instances the executions belong to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentId",
          "in" : "query",
          "description" : "Filter by the incident id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processVariables",
          "in" : "query",
          "description" : "Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessageLike",
          "in" : "query",
          "description" : "Filter by the incident message that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Execution" ],
        "summary" : "Queries for the number of executions that fulfill given parameters.",
        "description" : "Queries for the number of executions that fulfill given parameters. This method takes the same message body as the Get Executions (POST) method and therefore it is slightly more powerful than the Get Execution Count method.",
        "operationId" : "queryExecutionsCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExecutionQueryDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}" : {
      "get" : {
        "tags" : [ "Execution" ],
        "summary" : "Retrieves an execution by id, according to the `Execution` interface in the engine.",
        "description" : "Retrieves an execution by id, according to the `Execution` interface in the engine.",
        "operationId" : "getExecution",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}/create-incident" : {
      "post" : {
        "tags" : [ "Execution" ],
        "summary" : "Create Incident.",
        "description" : "Create Incident",
        "operationId" : "createIncident",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IncidentDto"
            }
          }
        }
      }
    },
    "/execution/{id}/localVariables" : {
      "get" : {
        "tags" : [ "Execution" ],
        "summary" : "Retrieves all variables of a given execution by id.",
        "description" : "Retrieves all variables of a given execution by id.",
        "operationId" : "getLocalVariables",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "Execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Execution" ],
        "summary" : "Updates or deletes the variables in the context of a case execution.",
        "description" : "Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy. Please note: deletion precedes update.",
        "operationId" : "modifyExecutionVariables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter patch",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PatchVariablesDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "Update or deletion could not be executed, for example because the case execution does not exist."
          }
        }
      }
    },
    "/execution/{id}/localVariables/{varId}" : {
      "get" : {
        "tags" : [ "Execution" ],
        "summary" : "Retrieves a variable from the context of a given case execution.",
        "description" : "Retrieves a variable from the context of a given case execution. Does not traverse the parent case execution hierarchy.",
        "operationId" : "getExecutionVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deserializeValue",
          "in" : "query",
          "description" : "Parameter deserializeValue",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/VariableValueDto"
            }
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Execution" ],
        "summary" : "Sets a variable in the context of a given case execution.",
        "description" : "Sets a variable in the context of a given case execution. Update does not propagate upwards in the case execution hierarchy.",
        "operationId" : "putExecutionVariable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter variable",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Execution" ],
        "summary" : "Deletes a variable in the context of a given case execution.",
        "description" : "Deletes a variable in the context of a given case execution. Deletion does not propagate upwards in the case execution hierarchy.",
        "operationId" : "deleteExecutionVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          }
        }
      }
    },
    "/execution/{id}/localVariables/{varId}/data" : {
      "get" : {
        "tags" : [ "Execution" ],
        "summary" : "Retrieves a binary variable from the context of a given case execution.",
        "description" : "Retrieves a binary variable from the context of a given case execution. Does not traverse the parent case execution hierarchy. Applicable for byte array and file variables.",
        "operationId" : "getLocalVariableBinary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Variable with given id exists but is not a binary variable. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Execution" ],
        "summary" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "description" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "operationId" : "setLocalBinaryVariable",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter multipartFormData",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormData"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if no filename is set. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}/messageSubscriptions/{messageName}" : {
      "get" : {
        "tags" : [ "Execution" ],
        "summary" : "Retrieves a message event subscription for a given execution by id and a message name.",
        "description" : "Retrieves a message event subscription for a given execution by id and a message name.",
        "operationId" : "getMessageEventSubscription",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "messageName",
          "in" : "path",
          "description" : "Parameter messageName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "A message subscription for the given name and execution does not exist. This may either mean that the execution does not exist, or that it is not subscribed on such a message. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}/messageSubscriptions/{messageName}/trigger" : {
      "post" : {
        "tags" : [ "Execution" ],
        "summary" : "Delivers a message to a specific execution by id, to trigger an existing message event subscription.",
        "description" : "Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message's payload.",
        "operationId" : "triggerEvent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter triggerDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExecutionTriggerDto"
          }
        }, {
          "name" : "messageName",
          "in" : "path",
          "description" : "Parameter messageName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The addressed execution has no pending message subscriptions for the given message. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}/signal" : {
      "post" : {
        "tags" : [ "Execution" ],
        "summary" : "Signals an execution by id.",
        "description" : "Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.",
        "operationId" : "signalExecution",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter triggerDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExecutionTriggerDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter executionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Queries for the external tasks that fulfill given parameters.",
        "description" : "Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the Get External Task Count method.",
        "operationId" : "getExternalTasks",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processInstanceId",
          "in" : "query",
          "description" : "Filter by the id of the process instance that an external task belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by the id of the process definition that an external task belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "workerId",
          "in" : "query",
          "description" : "Filter by the id of the worker that the task was most recently locked by.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withRetriesLeft",
          "in" : "query",
          "description" : "Only include external tasks that have a positive (> 0) number of retries (or null). Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "notLocked",
          "in" : "query",
          "description" : "Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lockExpirationAfter",
          "in" : "query",
          "description" : "Restrict to external tasks that have a lock that expires after a given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active tasks. Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended tasks. Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityId",
          "in" : "query",
          "description" : "Filter by the id of the activity that an external task is created for.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "query",
          "description" : "Filter by the id of the execution that an external task belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "priorityLowerThanOrEquals",
          "in" : "query",
          "description" : "Only include jobs with a priority lower than or equal to the given value. Value must be a valid long value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "priorityHigherThanOrEquals",
          "in" : "query",
          "description" : "Only include jobs with a priority higher than or equal to the given value. Value must be a valid long value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lockExpirationBefore",
          "in" : "query",
          "description" : "Restrict to external tasks that have a lock that expires before a given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "topicName",
          "in" : "query",
          "description" : "Filter by an external task topic.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are id, lockExpirationTime, processInstanceId, processDefinitionId, processDefinitionKey, tenantId and taskPriority. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "noRetriesLeft",
          "in" : "query",
          "description" : "Only include external tasks that have 0 retries. Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "externalTaskId",
          "in" : "query",
          "description" : "Filter by an external task's id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "locked",
          "in" : "query",
          "description" : "Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityIdIn",
          "in" : "query",
          "description" : "Filter by the comma-separated list of ids of the activities that an external task is created for.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "External" ],
        "summary" : "Queries for external tasks that fulfill given parameters in the form of a JSON object.",
        "description" : "Queries for external tasks that fulfill given parameters in the form of a JSON object. This method is slightly more powerful than the Get External Tasks method because it allows to specify a hierarchical result sorting.",
        "operationId" : "queryExternalTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExternalTaskQueryDto"
          }
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/count" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Queries for the number of external tasks that fulfill given parameters.",
        "description" : "Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the Get External Tasks method.",
        "operationId" : "getExternalTasksCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processInstanceId",
          "in" : "query",
          "description" : "Filter by the id of the process instance that an external task belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by the id of the process definition that an external task belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "workerId",
          "in" : "query",
          "description" : "Filter by the id of the worker that the task was most recently locked by.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withRetriesLeft",
          "in" : "query",
          "description" : "Only include external tasks that have a positive (> 0) number of retries (or null). Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "notLocked",
          "in" : "query",
          "description" : "Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lockExpirationAfter",
          "in" : "query",
          "description" : "Restrict to external tasks that have a lock that expires after a given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active tasks. Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended tasks. Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityId",
          "in" : "query",
          "description" : "Filter by the id of the activity that an external task is created for.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "query",
          "description" : "Filter by the id of the execution that an external task belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "priorityLowerThanOrEquals",
          "in" : "query",
          "description" : "Only include jobs with a priority lower than or equal to the given value. Value must be a valid long value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "priorityHigherThanOrEquals",
          "in" : "query",
          "description" : "Only include jobs with a priority higher than or equal to the given value. Value must be a valid long value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lockExpirationBefore",
          "in" : "query",
          "description" : "Restrict to external tasks that have a lock that expires before a given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "topicName",
          "in" : "query",
          "description" : "Filter by an external task topic.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "noRetriesLeft",
          "in" : "query",
          "description" : "Only include external tasks that have 0 retries. Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "externalTaskId",
          "in" : "query",
          "description" : "Filter by an external task's id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "locked",
          "in" : "query",
          "description" : "Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be true, as false matches any external task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityIdIn",
          "in" : "query",
          "description" : "Filter by the comma-separated list of ids of the activities that an external task is created for.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "External" ],
        "summary" : "Queries for the number of external tasks that fulfill given parameters.",
        "description" : "Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the Get External Tasks (POST) method.",
        "operationId" : "queryExternalTasksCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExternalTaskQueryDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/fetchAndLock" : {
      "post" : {
        "tags" : [ "External" ],
        "summary" : "Fetches and locks a specific number of external tasks for execution by a worker.",
        "description" : "Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.",
        "operationId" : "external.fetch",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter fetchingDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FetchExternalTasksDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "500" : {
            "description" : "Returned if fetching is not successful, for example due to missing parameters. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/retries" : {
      "put" : {
        "tags" : [ "External" ],
        "summary" : "Set Retries.",
        "description" : "Set Retries",
        "operationId" : "setRetries",
        "consumes" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/external-task/retries-async" : {
      "post" : {
        "tags" : [ "External" ],
        "summary" : "Sets the number of retries left to execute external tasks by id asynchronously.",
        "description" : "Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.",
        "operationId" : "setRetriesAsync",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter retriesDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetRetriesForExternalTasksDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          },
          "400" : {
            "description" : "If neither externalTaskIds nor externalTaskQuery are present or externalTaskIds contains null value or the number of retries is negative, an exception of type InvalidRequestException is returned. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.",
        "description" : "Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.",
        "operationId" : "getExternalTask",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter externalTaskId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "External task with the given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/bpmnError" : {
      "post" : {
        "tags" : [ "External" ],
        "summary" : "Reports a business error in the context of a running external task by id.",
        "description" : "Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.",
        "operationId" : "handleBpmnError",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExternalTaskBpmnError"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter externalTaskId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if the task's most recent lock was not acquired by the provided worker. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "Returned if the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/complete" : {
      "post" : {
        "tags" : [ "External" ],
        "summary" : "Completes an external task by id and updates process variables.",
        "description" : "Completes an external task by id and updates process variables.",
        "operationId" : "externaltask.complete",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CompleteExternalTaskDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter externalTaskId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if the task's most recent lock was not acquired by the provided worker. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "Returned if the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/errorDetails" : {
      "get" : {
        "tags" : [ "External" ],
        "summary" : "Get Error Details.",
        "description" : "Get Error Details",
        "operationId" : "getErrorDetails",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter externalTaskId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/external-task/{id}/extendLock" : {
      "post" : {
        "tags" : [ "External" ],
        "summary" : "Extend Lock.",
        "description" : "Extend Lock",
        "operationId" : "extendLock",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter externalTaskId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/external-task/{id}/failure" : {
      "post" : {
        "tags" : [ "External" ],
        "summary" : "Reports a failure to execute an external task by id.",
        "description" : "Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.",
        "operationId" : "task.fail",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExternalTaskFailureDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter externalTaskId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if the task's most recent lock was not acquired by the provided worker. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "Returned if the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/priority" : {
      "put" : {
        "tags" : [ "External" ],
        "summary" : "Sets the priority of an existing external task by id.",
        "description" : "Sets the priority of an existing external task by id. The default value of a priority is 0.",
        "operationId" : "setPriority",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PriorityDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter externalTaskId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/retries" : {
      "put" : {
        "tags" : [ "External" ],
        "summary" : "Sets the number of retries left to execute an external task by id.",
        "description" : "Sets the number of retries left to execute an external task by id. If retries are set to 0, an incident is created.",
        "operationId" : "setRetriesId",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RetriesDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter externalTaskId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "In case the number of retries is negative, an exception of type InvalidRequestException is returned. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/unlock" : {
      "post" : {
        "tags" : [ "External" ],
        "summary" : "Unlocks an external task by id.",
        "description" : "Unlocks an external task by id. Clears the task's lock expiration time and worker id.",
        "operationId" : "unlock",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter externalTaskId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/filter" : {
      "get" : {
        "tags" : [ "Filter" ],
        "summary" : "Queries for a list of filters using a list of parameters.",
        "description" : "Queries for a list of filters using a list of parameters. The size of the result set can be retrieved by using the Get Filter Count method.",
        "operationId" : "getFilters",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "query",
          "description" : "Filter by the id of the filter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter by the user id of the owner of the filter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by the name that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by the name of the filter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are filterId, firstName, lastName and email. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Filter by the resource type of the filter, e.g., Task.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "itemCount",
          "in" : "query",
          "description" : "If set to true, each filter result will contain an itemCount property with the number of items matched by the filter itself.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "Filter" ],
        "summary" : "The `/filter` resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances.",
        "description" : "The `/filter` resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/filter` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/filter/count" : {
      "get" : {
        "tags" : [ "Filter" ],
        "summary" : "Retrieves the number of filters that fulfill a provided query.",
        "description" : "Retrieves the number of filters that fulfill a provided query. Corresponds to the size of the result set when using the Get Filters method.",
        "operationId" : "getFiltersCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filterId",
          "in" : "query",
          "description" : "Restrict to filters that have the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Restrict to filters that the given user owns.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Restrict to filters that have a name with the given parameter value as substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Restrict to filters that have the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceType",
          "in" : "query",
          "description" : "Restrict to filters that have the given resource type, e.g., Task.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/filter/create" : {
      "post" : {
        "tags" : [ "Filter" ],
        "summary" : "Creates a new filter.",
        "description" : "Creates a new filter.The `query` parameter of the request body takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "createFilter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter filterDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FilterDto"
            }
          }
        }
      }
    },
    "/filter/{id}" : {
      "get" : {
        "tags" : [ "Filter" ],
        "summary" : "Retrieves a single filter by id, according to the `Filter` interface in the engine.",
        "description" : "Retrieves a single filter by id, according to the `Filter` interface in the engine.",
        "operationId" : "getFilter",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Filter" ],
        "summary" : "Updates an existing filter.",
        "description" : "Updates an existing filter.The `query` parameter of the request body takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "updateFilter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter filterDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Filter was invalid. See Introduction for the error response format."
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to update this filter. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Filter cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Filter" ],
        "summary" : "Deletes a filter by id.",
        "description" : "Deletes a filter by id.",
        "operationId" : "deleteFilter",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to delete this filter. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Filter cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "Filter" ],
        "summary" : "The `/filter` resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances.",
        "description" : "The `/filter` resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/filter` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/filter/{id}/count" : {
      "get" : {
        "tags" : [ "Filter" ],
        "summary" : "Executes the saved query of the filter by id and returns the count.",
        "description" : "Executes the saved query of the filter by id and returns the count.",
        "operationId" : "executeCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Filter" ],
        "summary" : "Executes the saved query of the filter by id and returns the count.",
        "description" : "Executes the saved query of the filter by id and returns the count. This method is slightly more powerful then the Get Execute Filter Count method because it allows to extend the saved query of the filter.The request body of this method takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "queryCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter extendingQuery",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "The extending query was invalid. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/filter/{id}/list" : {
      "get" : {
        "tags" : [ "Filter" ],
        "summary" : "Executes the saved query of the filter by id and returns the result list.",
        "description" : "Executes the saved query of the filter by id and returns the result list.",
        "operationId" : "executeList",
        "produces" : [ "application/json", "application/hal+json" ],
        "parameters" : [ {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful. In case of an expected HAL response.",
            "schema" : {
              "type" : "object"
            }
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Filter" ],
        "summary" : "Executes the saved query of the filter by id and returns the result list.",
        "description" : "Executes the saved query of the filter by id and returns the result list. This method is slightly more powerful then the Get Execute Filter List method because it allows to extend the saved query of the filter.The request body of this method takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "queryList",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/hal+json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter extendingQuery",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/filter/{id}/singleResult" : {
      "get" : {
        "tags" : [ "Filter" ],
        "summary" : "Executes the saved query of the filter by id and returns the single result.",
        "description" : "Executes the saved query of the filter by id and returns the single result.",
        "operationId" : "executeSingleResult",
        "produces" : [ "application/json", "application/hal+json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful. In case of an expected HAL response.",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "Request successful, but the result was empty."
          },
          "400" : {
            "description" : "The executed filter returned more than one single result. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Filter" ],
        "summary" : "Executes the saved query of the filter by id and returns the single result.",
        "description" : "Executes the saved query of the filter by id and returns the single result. This method is slightly more powerful then the Get Execute Filter Single Result method because it allows to extend the saved query of the filter.The request body of this method takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "querySingleResult",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "application/hal+json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter extendingQuery",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter filterId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful. In case of an expected HAL response.",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "Request successful, but the result was empty."
          },
          "400" : {
            "description" : "The executed filter returned more than one single result or the extending query was invalid. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/group" : {
      "get" : {
        "tags" : [ "Group" ],
        "summary" : "Queries for a list of groups using a list of parameters.",
        "description" : "Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the Get Group Count method.",
        "operationId" : "queryGroups",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by the name that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by the name of the group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member",
          "in" : "query",
          "description" : "Only retrieve groups which the given user id is a member of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are id, name and type. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by the id of the group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by the type of the group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "memberOfTenant",
          "in" : "query",
          "description" : "Only retrieve groups which are members of the given tenant.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "Group" ],
        "summary" : "The `/group` resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances.",
        "description" : "The `/group` resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/group/count" : {
      "get" : {
        "tags" : [ "Group" ],
        "summary" : "Queries for groups using a list of parameters and retrieves the count.",
        "description" : "Queries for groups using a list of parameters and retrieves the count.",
        "operationId" : "getGroupCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by the name that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by the name of the group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member",
          "in" : "query",
          "description" : "Only retrieve groups where the given user id is a member of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by the id of the group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by the type of the group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "memberOfTenant",
          "in" : "query",
          "description" : "Only retrieve groups which are members of the given tenant.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/group/create" : {
      "post" : {
        "tags" : [ "Group" ],
        "summary" : "Creates a new group.",
        "description" : "Creates a new group.",
        "operationId" : "createGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter GroupDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GroupDto"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "500" : {
            "description" : "The group could not be created due to an internal server error. See the Introduction for the error response format."
          }
        }
      }
    },
    "/group/{id}" : {
      "get" : {
        "tags" : [ "Group" ],
        "summary" : "Retrieves a group by id.",
        "description" : "Retrieves a group by id.",
        "operationId" : "getGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Group with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Group" ],
        "summary" : "Updates a given group by id.",
        "description" : "Updates a given group by id.",
        "operationId" : "updateGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter Group",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GroupDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404" : {
            "description" : "If the group with the requested Id cannot be found."
          },
          "500" : {
            "description" : "The group could not be updated due to an internal server error. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Group" ],
        "summary" : "Deletes a group by id.",
        "description" : "Deletes a group by id.",
        "operationId" : "deleteGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404" : {
            "description" : "Group cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "Group" ],
        "summary" : "The `/group` resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances.",
        "description" : "The `/group` resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/group/{id}/members" : {
      "get" : {
        "tags" : [ "Group" ],
        "summary" : "Get Group Members Resource.",
        "description" : "Get Group Members Resource",
        "operationId" : "getGroupMembersResource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "options" : {
        "tags" : [ "Group" ],
        "summary" : "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource.",
        "description" : "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/group/{id}/members/{userId}" : {
      "put" : {
        "tags" : [ "Group" ],
        "summary" : "Adds a member to a group.",
        "description" : "Adds a member to a group.",
        "operationId" : "createGroupMember",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Parameter userId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "500" : {
            "description" : "In case an internal error occurs. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Group" ],
        "summary" : "Removes a member from a group.",
        "description" : "Removes a member from a group.",
        "operationId" : "deleteGroupMember",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Parameter userId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "500" : {
            "description" : "In case an error occurs. See the Introduction for the error response format."
          }
        }
      }
    },
    "/identity/groups" : {
      "get" : {
        "tags" : [ "Identity" ],
        "summary" : "Gets the groups of a user by id and includes all users that share a group with the given user.",
        "description" : "Gets the groups of a user by id and includes all users that share a group with the given user.",
        "operationId" : "getGroupInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "description" : "Parameter userId",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/GroupInfoDto"
            }
          },
          "400" : {
            "description" : "If the userId query parameter is missing. See the Introduction for the error response format."
          }
        }
      }
    },
    "/identity/verify" : {
      "post" : {
        "tags" : [ "Identity" ],
        "summary" : "Verifies that user credentials are valid.",
        "description" : "Verifies that user credentials are valid.",
        "operationId" : "verifyUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter credentialsDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/BasicUserCredentialsDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/AuthenticationResult"
            }
          },
          "400" : {
            "description" : "If body does not contain username or password."
          }
        }
      }
    },
    "/job" : {
      "get" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Queries for jobs that fulfill given parameters.",
        "description" : "Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the Get Job Count method.",
        "operationId" : "getJobs",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "withRetriesLeft",
          "in" : "query",
          "description" : "Only select jobs which have retries left. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "dueDates",
          "in" : "query",
          "description" : "Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows: A valid condition value has the form operator_value. operator is the comparison operator to be used and value the date value as string. Valid operator values are: gt - greater than; lt - lower than. value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the process definition the jobs run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityId",
          "in" : "query",
          "description" : "Only select jobs which exist for an activity with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "priorityLowerThanOrEquals",
          "in" : "query",
          "description" : "Only include jobs with a priority lower than or equal to the given value. Value must be a valid long value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withException",
          "in" : "query",
          "description" : "Only select jobs that failed due to an exception. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "priorityHigherThanOrEquals",
          "in" : "query",
          "description" : "Only include jobs with a priority higher than or equal to the given value. Value must be a valid long value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Only include jobs which belong to one of the passed and comma-separated tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results by a given criterion. Valid values are jobId, executionId, processInstanceId, jobPriority, jobRetries, jobDueDate and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "exceptionMessage",
          "in" : "query",
          "description" : "Only select jobs that failed due to an exception with the given message.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceId",
          "in" : "query",
          "description" : "Only select jobs which exist for the given process instance.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by the id of the process definition the jobs run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobDefinitionId",
          "in" : "query",
          "description" : "Only select jobs which exist for the given job definition.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "timers",
          "in" : "query",
          "description" : "Only select jobs that are timers. Cannot be used together with messages. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active jobs. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executable",
          "in" : "query",
          "description" : "Only select jobs which are executable, i.e., retries > 0 and due date is null or due date is in the past. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended jobs. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobId",
          "in" : "query",
          "description" : "Filter by job id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "query",
          "description" : "Only select jobs which exist for the given execution.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeJobsWithoutTenantId",
          "in" : "query",
          "description" : "Include jobs which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "messages",
          "in" : "query",
          "description" : "Only select jobs that are messages. Cannot be used together with timers. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include jobs which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "noRetriesLeft",
          "in" : "query",
          "description" : "Only select jobs which have no retries left. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for due date comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Queries for jobs that fulfill given parameters.",
        "description" : "Queries for jobs that fulfill given parameters. This method is slightly more powerful than the Get Jobs method because it allows filtering by multiple jobs of types String, Number or Boolean.",
        "operationId" : "queryJobs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter queryDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobQueryDto"
          }
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for due date comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition" : {
      "get" : {
        "tags" : [ "Job Definition" ],
        "summary" : "Queries for job definitions that fulfill given parameters.",
        "description" : "Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the Get Job Definition Count method.",
        "operationId" : "getJobDefinitions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Only include job definitions which exist for the given process definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobDefinitionId",
          "in" : "query",
          "description" : "Filter by job definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withOverridingJobPriority",
          "in" : "query",
          "description" : "Only include job definitions that have an overriding job priority defined. The only effective value is true. If set to false, this filter is not applied.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active job definitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended job definitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Only include job definitions which exist for the given process definition key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeJobDefinitionsWithoutTenantId",
          "in" : "query",
          "description" : "Include job definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Only include job definitions which belong to one of the passed and comma-separated tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include job definitions which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are jobDefinitionId, activityId, processDefinitionId, processDefinitionKey, jobType, jobConfiguration and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobConfiguration",
          "in" : "query",
          "description" : "Only include job definitions which exist for the given job context. For example: for timer jobs it is the timer context.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobType",
          "in" : "query",
          "description" : "Only include job definitions which exist for the given job type. See the User Guide for more information about job types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityIdIn",
          "in" : "query",
          "description" : "Only include job definitions which belong to one of the passed and comma-separated activity ids.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Job Definition" ],
        "summary" : "Queries for job definitions that fulfill given parameters.",
        "description" : "Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the Get Job Definitions method because it allows filtering by multiple job definitions of types String, Number or Boolean.",
        "operationId" : "queryJobDefinitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter queryDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobDefinitionQueryDto"
          }
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/count" : {
      "get" : {
        "tags" : [ "Job Definition" ],
        "summary" : "Queries for the number of job definitions that fulfill given parameters.",
        "description" : "Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the Get Job Definitions method.",
        "operationId" : "getJobDefinitionsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Only include job definitions which exist for the given process definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobDefinitionId",
          "in" : "query",
          "description" : "Filter by job definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeJobDefinitionsWithoutTenantId",
          "in" : "query",
          "description" : "Include job definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Only include job definitions which belong to one of the passed and comma-separated tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withOverridingJobPriority",
          "in" : "query",
          "description" : "Only include job definitions that have an overriding job priority defined. The only effective value is true. If set to false, this filter is not applied.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active job definitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include job definitions which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobConfiguration",
          "in" : "query",
          "description" : "Only include job definitions which exist for the given job context. For example: for timer jobs it is the timer context.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobType",
          "in" : "query",
          "description" : "Only include job definitions which exist for the given job type. See the User Guide for more information about job types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended job definitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityIdIn",
          "in" : "query",
          "description" : "Only include job definitions which belong to one of the passed and comma-separated activity ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Only include job definitions which exist for the given process definition key.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Job Definition" ],
        "summary" : "Queries for the number of job definitions that fulfill given parameters.",
        "description" : "Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the Get Job Definitions (POST) method and therefore it is slightly more powerful than the Get Job Definition Count method.",
        "operationId" : "queryJobDefinitionsCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter queryDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobDefinitionQueryDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/suspended" : {
      "put" : {
        "tags" : [ "Job Definition" ],
        "summary" : "Activates or suspends job definitions with the given process definition id.",
        "description" : "Activates or suspends job definitions with the given process definition id.",
        "operationId" : "updateJobSuspensionState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobDefinitionSuspensionStateDto"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format or if the processDefinitionId parameter is null. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/{id}" : {
      "get" : {
        "tags" : [ "Job Definition" ],
        "summary" : "Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.",
        "description" : "Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.",
        "operationId" : "getJobDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Job definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/{id}/jobPriority" : {
      "put" : {
        "tags" : [ "Job Definition" ],
        "summary" : "Sets an overriding execution priority for jobs with the given definition id.",
        "description" : "Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definition's existing jobs are updated accordingly. The priority can be reset by setting it to null, meaning that a new job's priority will not be determined based on its definition's priority any longer. See the user guide on job prioritization for details.",
        "operationId" : "setJobPriorityDefinition",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobDefinitionPriorityDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Job definition with given id does not exist. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The retries could not be set successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/{id}/retries" : {
      "put" : {
        "tags" : [ "Job Definition" ],
        "summary" : "Sets the number of retries of all failed jobs associated with the given job definition id.",
        "description" : "Sets the number of retries of all failed jobs associated with the given job definition id.",
        "operationId" : "setJobRetriesDefinition",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RetriesDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "The retries could not be set successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/{id}/suspended" : {
      "put" : {
        "tags" : [ "Job Definition" ],
        "summary" : "Activates or suspends a given job definition by id.",
        "description" : "Activates or suspends a given job definition by id.",
        "operationId" : "updateJobDefintitionSuspensionStateId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobDefinitionSuspensionStateDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/count" : {
      "get" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Queries for the number of jobs that fulfill given parameters.",
        "description" : "Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the Get Jobs method.",
        "operationId" : "getJobsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processInstanceId",
          "in" : "query",
          "description" : "Only select jobs which exist for the given process instance.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by the id of the process definition the jobs run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobDefinitionId",
          "in" : "query",
          "description" : "Only select jobs which exist for the given job definition.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "timers",
          "in" : "query",
          "description" : "Only select jobs that are timers. Cannot be used together with messages. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withRetriesLeft",
          "in" : "query",
          "description" : "Only select jobs which have retries left. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "dueDates",
          "in" : "query",
          "description" : "Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows: A valid condition value has the form operator_value. operator is the comparison operator to be used and value the date value as string. Valid operator values are: gt - greater than; lt - lower than. value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active jobs. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executable",
          "in" : "query",
          "description" : "Only select jobs which are executable, i.e., retries > 0 and due date is null or due date is in the past. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended jobs. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the process definition the jobs run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobId",
          "in" : "query",
          "description" : "Filter by job id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "query",
          "description" : "Only select jobs which exist for the given execution.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityId",
          "in" : "query",
          "description" : "Only select jobs which exist for an activity with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "priorityLowerThanOrEquals",
          "in" : "query",
          "description" : "Only include jobs with a priority lower than or equal to the given value. Value must be a valid long value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withException",
          "in" : "query",
          "description" : "Only select jobs that failed due to an exception. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "priorityHigherThanOrEquals",
          "in" : "query",
          "description" : "Only include jobs with a priority higher than or equal to the given value. Value must be a valid long value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Only include jobs which belong to one of the passed and comma-separated tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeJobsWithoutTenantId",
          "in" : "query",
          "description" : "Include jobs which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "messages",
          "in" : "query",
          "description" : "Only select jobs that are messages. Cannot be used together with timers. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include jobs which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "noRetriesLeft",
          "in" : "query",
          "description" : "Only select jobs which have no retries left. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "exceptionMessage",
          "in" : "query",
          "description" : "Only select jobs that failed due to an exception with the given message.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Queries for jobs that fulfill given parameters.",
        "description" : "Queries for jobs that fulfill given parameters. This method takes the same message body as the Get Jobs (POST) method and therefore it is slightly more powerful than the Get Job Count method.",
        "operationId" : "queryJobsCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter queryDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobQueryDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for due date comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/retries" : {
      "post" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Create a batch to set retries of jobs asynchronously.",
        "description" : "Create a batch to set retries of jobs asynchronously.",
        "operationId" : "setRetriesJob",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter setJobRetriesDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetJobRetriesDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if neither processInstanceIds nor processInstanceQuery is present. Or if the retry count is not specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/suspended" : {
      "put" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Activates or suspends jobs with the given process definition id.",
        "description" : "Activates or suspends jobs with the given process definition id.",
        "operationId" : "updateSuspensionState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobSuspensionStateDto"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid, for example if the processDefinitionId parameter is null. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}" : {
      "get" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Retrieves a job by id, according to the `Job` interface in the engine.",
        "description" : "Retrieves a job by id, according to the `Job` interface in the engine.",
        "operationId" : "getJob",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Job with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Deletes a job by id.",
        "description" : "Deletes a job by id.",
        "operationId" : "deleteJob",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Job with given id does not exist. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The job could not be deleted. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/duedate" : {
      "put" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Updates the due date of a job by id.",
        "description" : "Updates the due date of a job by id.",
        "operationId" : "setJobDuedate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobDuedateDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Job with given id does not exist. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The due date could not be set successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/execute" : {
      "post" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Executes a job by id.",
        "description" : "Executes a job by id. \nNote: The execution of the job happens synchronously in the same thread.",
        "operationId" : "executeJob",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Job with given id does not exist. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The job could not be executed successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/priority" : {
      "put" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Sets the execution priority of a job by id.",
        "description" : "Sets the execution priority of a job by id.",
        "operationId" : "setJobPriority",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PriorityDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Job with given id does not exist. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The priority could not be set successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/retries" : {
      "put" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Sets the retries of the job to the given number of retries by id.",
        "description" : "Sets the retries of the job to the given number of retries by id.",
        "operationId" : "setJobRetries",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RetriesDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Job with given id does not exist. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The retries could not be set successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/stacktrace" : {
      "get" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Retrieves the exception stacktrace corresponding to the passed job id.",
        "description" : "Retrieves the exception stacktrace corresponding to the passed job id.",
        "operationId" : "getStacktrace",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "string"
            }
          },
          "404" : {
            "description" : "Job with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/suspended" : {
      "put" : {
        "tags" : [ "Job Execution" ],
        "summary" : "Activates or suspends a given job by id.",
        "description" : "Activates or suspends a given job by id.",
        "operationId" : "updateJobSuspensionStateId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JobSuspensionStateDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter jobId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          }
        }
      }
    },
    "/message" : {
      "post" : {
        "tags" : [ "Message" ],
        "summary" : "Correlates a message to the process engine to either trigger a message start event or an intermediate message catching event.",
        "description" : "Correlates a message to the process engine to either trigger a message start event or an intermediate message catching event. Internally this maps to the engine's message correlation builder methods `MessageCorrelationBuilder#correlateWithResult()` and `MessageCorrelationBuilder#correlateAllWithResult()`. For more information about the correlation behavior, see the Message Events section of the BPMN 2.0 Implementation Reference.",
        "operationId" : "message.send",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter messageDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CorrelationMessageDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful. The property resultEnabled in the request body was true."
          },
          "204" : {
            "description" : "Request successful. The property resultEnabled in the request body was false (Default)."
          },
          "400" : {
            "description" : "If no messageName was supplied. If both tenantId and withoutTenantId are supplied. If the message has not been correlated to exactly one entity (execution or process definition), or the variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          }
        }
      }
    },
    "/migration/execute" : {
      "post" : {
        "tags" : [ "Migration" ],
        "summary" : "Executes a migration plan synchronously for multiple process instances.",
        "description" : "Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the Execute Migration Plan Async (Batch) method.For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of the user guide.",
        "operationId" : "executeMigrationPlan",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter migrationPlan",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MigrationExecutionDto"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/migration/executeAsync" : {
      "post" : {
        "tags" : [ "Migration" ],
        "summary" : "Executes a migration plan asynchronously (batch) for multiple process instances.",
        "description" : "Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the Execute Migration Plan method.For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of the user guide.",
        "operationId" : "executeMigrationPlanAsync",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter migrationPlan",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MigrationExecutionDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/migration/generate" : {
      "post" : {
        "tags" : [ "Migration" ],
        "summary" : "Generates a migration plan for two process definitions.",
        "description" : "Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.",
        "operationId" : "generateMigrationPlan",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter generationDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MigrationPlanGenerationDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MigrationPlanDto"
            }
          }
        }
      }
    },
    "/migration/validate" : {
      "post" : {
        "tags" : [ "Migration" ],
        "summary" : "Validates a migration plan statically without executing it.",
        "description" : "Validates a migration plan statically without executing it. This corresponds to the creation time validation described in the user guide.",
        "operationId" : "validateMigrationPlan",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter migrationPlanDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MigrationPlanDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MigrationPlanReportDto"
            }
          }
        }
      }
    },
    "/modification/execute" : {
      "post" : {
        "tags" : [ "Modification" ],
        "summary" : "Execute Modification.",
        "description" : "Execute Modification",
        "operationId" : "executeModification",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/modification/executeAsync" : {
      "post" : {
        "tags" : [ "Modification" ],
        "summary" : "Executes a modification asynchronously for multiple process instances.",
        "description" : "Executes a modification asynchronously for multiple process instances. To execute a modification synchronously, use the Execute Modification method.For more information about the difference between synchronous and asynchronous execution of a modification, please refer to the related section of the user guide.",
        "operationId" : "executeModificationAsync",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter modificationExecutionDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModificationDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/process-definition" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Queries for process definitions that fulfill given parameters.",
        "description" : "Queries for process definitions that fulfill given parameters. Parameters may be the properties of process definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Definition Count method.",
        "operationId" : "getProcessDefinitions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceNameLike",
          "in" : "query",
          "description" : "Filter by names of those process definition resources that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeProcessDefinitionsWithoutTenantId",
          "in" : "query",
          "description" : "Include process definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentType",
          "in" : "query",
          "description" : "Filter by the incident type. See the User Guide for a list of incident types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryLike",
          "in" : "query",
          "description" : "Filter by process definition categories that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Filter by the deployment the id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are category, key, id, name, version, deploymentId, tenantId and versionTag. Must be used in conjunction with the sortOrder parameter. Note: Sorting by versionTag is string based. The version will not be interpreted. As an example, the sorting could return v0.1.0, v0.10.0, v0.2.0.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startableBy",
          "in" : "query",
          "description" : "Filter by a user name who is allowed to start the process.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by process definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessage",
          "in" : "query",
          "description" : "Filter by the incident message. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionIdIn",
          "in" : "query",
          "description" : "Filter by process definition ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active process definitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter by the name of the process definition resource. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionTag",
          "in" : "query",
          "description" : "Filter by the version tag.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionTagLike",
          "in" : "query",
          "description" : "Filter by the version tag that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Filter by process definition version.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended process definitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by process definition names that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "latestVersion",
          "in" : "query",
          "description" : "Only include those process definitions that are latest versions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyLike",
          "in" : "query",
          "description" : "Filter by process definition keys that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by process definition name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Filter by process definition category. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentId",
          "in" : "query",
          "description" : "Filter by the incident id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessageLike",
          "in" : "query",
          "description" : "Filter by the incident message that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/count" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Requests the number of process definitions that fulfill the query criteria.",
        "description" : "Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Definitions method.",
        "operationId" : "getProcessDefinitionsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourceNameLike",
          "in" : "query",
          "description" : "Filter by names of those process definition resources that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeProcessDefinitionsWithoutTenantId",
          "in" : "query",
          "description" : "Include process definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentType",
          "in" : "query",
          "description" : "Filter by the incident type. See the User Guide for a list of incident types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryLike",
          "in" : "query",
          "description" : "Filter by process definition categories that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Filter by the deployment the id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startableBy",
          "in" : "query",
          "description" : "Filter by a user name who is allowed to start the process.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by process definition id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessage",
          "in" : "query",
          "description" : "Filter by the incident message. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionIdIn",
          "in" : "query",
          "description" : "Filter by process definition ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active process definitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter by the name of the process definition resource. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionTag",
          "in" : "query",
          "description" : "Filter by the version tag.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "versionTagLike",
          "in" : "query",
          "description" : "Filter by the version tag that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Filter by process definition version.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended process definitions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by process definition names that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "latestVersion",
          "in" : "query",
          "description" : "Only include those process definitions that are latest versions. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyLike",
          "in" : "query",
          "description" : "Filter by process definition keys that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by process definition name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Filter by process definition category. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentId",
          "in" : "query",
          "description" : "Filter by the incident id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessageLike",
          "in" : "query",
          "description" : "Filter by the incident message that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves a process definition according to the `ProcessDefinition` interface in the engine.",
        "description" : "Retrieves a process definition according to the `ProcessDefinition` interface in the engine.",
        "operationId" : "getProcessDefinitionByKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Process definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Delete Process Definition.",
        "description" : "Delete Process Definition",
        "operationId" : "deleteProcessDefinitionKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "cascade",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "skipCustomListeners",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/delete" : {
      "delete" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Delete Process Definitions By Key.",
        "description" : "Delete Process Definitions By Key",
        "operationId" : "deleteProcessDefinitionsByKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "cascade",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "skipCustomListeners",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/deployed-start-form" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Get Deployed Start Form.",
        "description" : "Get Deployed Start Form",
        "operationId" : "getDeployedStartForm",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/diagram" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the diagram of a process definition.",
        "description" : "Retrieves the diagram of a process definition.",
        "operationId" : "getProcessDefinitionDiagramKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "204" : {
            "description" : "The process definition doesn't have an associated diagram."
          },
          "404" : {
            "description" : "Process definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/form-variables" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach).",
        "description" : "Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        "operationId" : "getFormVariables",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "variableNames",
          "in" : "query",
          "description" : "Parameter variableNames",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deserializeValues",
          "in" : "query",
          "description" : "Parameter deserializeValues",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/history-time-to-live" : {
      "put" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Updates history time to live for process definition.",
        "description" : "Updates history time to live for process definition. The field is used within History cleanup.",
        "operationId" : "updateProcessHistoryTimeToLive",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter historyTimeToLiveDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HistoryTimeToLiveDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid."
          },
          "404" : {
            "description" : "Process definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/rendered-form" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the rendered form for a process definition.",
        "description" : "Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form.",
        "operationId" : "getProcessRenderedFormKey",
        "produces" : [ "application/xhtml+xml" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Process definition has no form field metadata defined. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/restart" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Restart Process Instance.",
        "description" : "Restart Process Instance",
        "operationId" : "restartProcessInstanceKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/restart-async" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Restart Process Instance Async.",
        "description" : "Restart Process Instance Async",
        "operationId" : "restartProcessInstanceAsyncKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/start" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Instantiates a given process definition.",
        "description" : "Instantiates a given process definition. Process variables and business key may be supplied in the request body.",
        "operationId" : "process.start",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StartProcessInstanceDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ProcessInstanceDto"
            }
          },
          "400" : {
            "description" : "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The instance could not be created due to a non existing process definition key. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The instance could not be created successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/startForm" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the key of the start form for a process definition.",
        "description" : "Retrieves the key of the start form for a process definition. The form key corresponds to the `FormData#formKey` property in the engine.",
        "operationId" : "getProcessStartForm",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/FormDto"
            }
          },
          "400" : {
            "description" : "Process definition has no start form defined. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/statistics" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves runtime statistics of a given process definition, grouped by activities.",
        "description" : "Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.\n Note: This does not include historic data.",
        "operationId" : "getActivityStatisticsKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "failedJobs",
          "in" : "query",
          "description" : "Parameter includeFailedJobs",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "incidents",
          "in" : "query",
          "description" : "Parameter includeIncidents",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "incidentsForType",
          "in" : "query",
          "description" : "Parameter includeIncidentsForType",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "If both query parameters incidents and incidentsForType were set. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/submit-form" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Starts a process instance using a set of process variables and the business key.",
        "description" : "Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms.",
        "operationId" : "submitFormKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StartProcessInstanceDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ProcessInstanceDto"
            }
          },
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The instance could not be created successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/suspended" : {
      "put" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Activates or suspends a given process definition by id or by latest version of process definition key.",
        "description" : "Activates or suspends a given process definition by id or by latest version of process definition key.",
        "operationId" : "updateProcessSuspensionState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProcessDefinitionSuspensionStateDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves a process definition according to the `ProcessDefinition` interface in the engine.",
        "description" : "Retrieves a process definition according to the `ProcessDefinition` interface in the engine.",
        "operationId" : "getProcessDefinitionByKeyAndTenantId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Process definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Delete Process Definition.",
        "description" : "Delete Process Definition",
        "operationId" : "deleteProcessDefinitionTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "cascade",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "skipCustomListeners",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/delete" : {
      "delete" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Delete Process Definitions By Key And Tenant Id.",
        "description" : "Delete Process Definitions By Key And Tenant Id",
        "operationId" : "deleteProcessDefinitionsByKeyAndTenantId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "cascade",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "skipCustomListeners",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/deployed-start-form" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Get Deployed Start Form.",
        "description" : "Get Deployed Start Form",
        "operationId" : "getDeployedStartFormTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/diagram" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the diagram of a process definition.",
        "description" : "Retrieves the diagram of a process definition.",
        "operationId" : "getProcessDefinitionDiagramTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "204" : {
            "description" : "The process definition doesn't have an associated diagram."
          },
          "404" : {
            "description" : "Process definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/form-variables" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach).",
        "description" : "Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        "operationId" : "getFormVariablesTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "variableNames",
          "in" : "query",
          "description" : "Parameter variableNames",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deserializeValues",
          "in" : "query",
          "description" : "Parameter deserializeValues",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/history-time-to-live" : {
      "put" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Updates history time to live for process definition.",
        "description" : "Updates history time to live for process definition. The field is used within History cleanup.",
        "operationId" : "updateProcessHistoryTimeToLiveTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter historyTimeToLiveDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HistoryTimeToLiveDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid."
          },
          "404" : {
            "description" : "Process definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/rendered-form" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the rendered form for a process definition.",
        "description" : "Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form.",
        "operationId" : "getRenderedFormTenant",
        "produces" : [ "application/xhtml+xml" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Process definition has no form field metadata defined. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/restart" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Restart Process Instance.",
        "description" : "Restart Process Instance",
        "operationId" : "restartProcessInstanceTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/restart-async" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Restart Process Instance Async.",
        "description" : "Restart Process Instance Async",
        "operationId" : "restartProcessInstanceAsyncTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/start" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Instantiates a given process definition.",
        "description" : "Instantiates a given process definition. Process variables and business key may be supplied in the request body.",
        "operationId" : "startProcessInstanceTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StartProcessInstanceDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ProcessInstanceDto"
            }
          },
          "400" : {
            "description" : "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The instance could not be created due to a non existing process definition key. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The instance could not be created successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/startForm" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the key of the start form for a process definition.",
        "description" : "Retrieves the key of the start form for a process definition. The form key corresponds to the `FormData#formKey` property in the engine.",
        "operationId" : "getProcessStartFormTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/FormDto"
            }
          },
          "400" : {
            "description" : "Process definition has no start form defined. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/statistics" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves runtime statistics of a given process definition, grouped by activities.",
        "description" : "Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.\n Note: This does not include historic data.",
        "operationId" : "getActivityStatisticsTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "failedJobs",
          "in" : "query",
          "description" : "Parameter includeFailedJobs",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "incidents",
          "in" : "query",
          "description" : "Parameter includeIncidents",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "incidentsForType",
          "in" : "query",
          "description" : "Parameter includeIncidentsForType",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "If both query parameters incidents and incidentsForType were set. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/submit-form" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Starts a process instance using a set of process variables and the business key.",
        "description" : "Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms.",
        "operationId" : "submitFormTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StartProcessInstanceDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ProcessInstanceDto"
            }
          },
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The instance could not be created successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/suspended" : {
      "put" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Activates or suspends a given process definition by id or by latest version of process definition key.",
        "description" : "Activates or suspends a given process definition by id or by latest version of process definition key.",
        "operationId" : "updateSuspensionStateTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProcessDefinitionSuspensionStateDto"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/xml" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the BPMN 2.",
        "description" : "Retrieves the BPMN 2.0 XML of a process definition.",
        "operationId" : "getProcessDefinitionBpmn20XmlTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "Parameter tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ProcessDefinitionDiagramDto"
            }
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/xml" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the BPMN 2.",
        "description" : "Retrieves the BPMN 2.0 XML of a process definition.",
        "operationId" : "getProcessDefinitionBpmn20XmlKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Parameter processDefinitionKey",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ProcessDefinitionDiagramDto"
            }
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/statistics" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves runtime statistics of the process engine, grouped by process definitions.",
        "description" : "Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.\n Note: This does not include historic data.",
        "operationId" : "getStatistics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "failedJobs",
          "in" : "query",
          "description" : "Parameter includeFailedJobs",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "incidents",
          "in" : "query",
          "description" : "Parameter includeIncidents",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "incidentsForType",
          "in" : "query",
          "description" : "Parameter includeIncidentsForType",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "If both query parameters incidents and incidentsForType were set. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/suspended" : {
      "put" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Activates or suspends process definitions with the given process definition key.",
        "description" : "Activates or suspends process definitions with the given process definition key.",
        "operationId" : "updateProcessDefinitionSuspensionState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProcessDefinitionSuspensionStateDto"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format or if the processDefinitionKey parameter is null. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves a process definition according to the `ProcessDefinition` interface in the engine.",
        "description" : "Retrieves a process definition according to the `ProcessDefinition` interface in the engine.",
        "operationId" : "getProcessDefinitionById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Process definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Delete Process Definition.",
        "description" : "Delete Process Definition",
        "operationId" : "deleteProcessDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "cascade",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "skipCustomListeners",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/{id}/deployed-start-form" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Get Deployed Start Form.",
        "description" : "Get Deployed Start Form",
        "operationId" : "getProcessDeployedStartForm",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/{id}/diagram" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the diagram of a process definition.",
        "description" : "Retrieves the diagram of a process definition.",
        "operationId" : "getProcessDefinitionDiagram",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "204" : {
            "description" : "The process definition doesn't have an associated diagram."
          },
          "404" : {
            "description" : "Process definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/form-variables" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach).",
        "description" : "Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        "operationId" : "getProcessFormVariables",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "variableNames",
          "in" : "query",
          "description" : "Parameter variableNames",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deserializeValues",
          "in" : "query",
          "description" : "Parameter deserializeValues",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/history-time-to-live" : {
      "put" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Updates history time to live for process definition.",
        "description" : "Updates history time to live for process definition. The field is used within History cleanup.",
        "operationId" : "updateHistoryTimeToLive",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter historyTimeToLiveDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HistoryTimeToLiveDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid."
          },
          "404" : {
            "description" : "Process definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/rendered-form" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the rendered form for a process definition.",
        "description" : "Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form.",
        "operationId" : "getProcessRenderedForm",
        "produces" : [ "application/xhtml+xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Process definition has no form field metadata defined. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/restart" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Restart Process Instance.",
        "description" : "Restart Process Instance",
        "operationId" : "restartProcessInstance",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/process-definition/{id}/restart-async" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Restart Process Instance Async.",
        "description" : "Restart Process Instance Async",
        "operationId" : "restartProcessInstanceAsync",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/process-definition/{id}/start" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Instantiates a given process definition.",
        "description" : "Instantiates a given process definition. Process variables and business key may be supplied in the request body.",
        "operationId" : "startProcessInstance",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StartProcessInstanceDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ProcessInstanceDto"
            }
          },
          "400" : {
            "description" : "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "The instance could not be created due to a non existing process definition key. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The instance could not be created successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/startForm" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the key of the start form for a process definition.",
        "description" : "Retrieves the key of the start form for a process definition. The form key corresponds to the `FormData#formKey` property in the engine.",
        "operationId" : "getStartForm",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/FormDto"
            }
          },
          "400" : {
            "description" : "Process definition has no start form defined. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/statistics" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves runtime statistics of a given process definition, grouped by activities.",
        "description" : "Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.\n Note: This does not include historic data.",
        "operationId" : "getActivityStatistics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "failedJobs",
          "in" : "query",
          "description" : "Parameter includeFailedJobs",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "incidents",
          "in" : "query",
          "description" : "Parameter includeIncidents",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "incidentsForType",
          "in" : "query",
          "description" : "Parameter includeIncidentsForType",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "If both query parameters incidents and incidentsForType were set. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/submit-form" : {
      "post" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Starts a process instance using a set of process variables and the business key.",
        "description" : "Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms.",
        "operationId" : "submitForm",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/StartProcessInstanceDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ProcessInstanceDto"
            }
          },
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "The instance could not be created successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/suspended" : {
      "put" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Activates or suspends a given process definition by id or by latest version of process definition key.",
        "description" : "Activates or suspends a given process definition by id or by latest version of process definition key.",
        "operationId" : "updateProcessDefinitionSuspensionStateId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProcessDefinitionSuspensionStateDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/xml" : {
      "get" : {
        "tags" : [ "Process Definition" ],
        "summary" : "Retrieves the BPMN 2.",
        "description" : "Retrieves the BPMN 2.0 XML of a process definition.",
        "operationId" : "getProcessDefinitionBpmn20Xml",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processDefinitionId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ProcessDefinitionDiagramDto"
            }
          },
          "404" : {
            "description" : "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance" : {
      "get" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Queries for process instances that fulfill given parameters.",
        "description" : "Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.",
        "operationId" : "getProcessInstances",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "subProcessInstance",
          "in" : "query",
          "description" : "Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentType",
          "in" : "query",
          "description" : "Filter by the incident type. See the User Guide for a list of incident types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the process definition the instances run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Filter by the deployment the id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are instanceId, definitionKey, definitionId, tenantId and businessKey. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by the process definition the instances run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variables",
          "in" : "query",
          "description" : "Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessage",
          "in" : "query",
          "description" : "Filter by the incident message. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "businessKeyLike",
          "in" : "query",
          "description" : "Filter by process instance business key that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "superCaseInstance",
          "in" : "query",
          "description" : "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceId",
          "in" : "query",
          "description" : "Filter by case instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active process instances. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceIds",
          "in" : "query",
          "description" : "Filter by a comma-separated list of process instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended process instances. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subCaseInstance",
          "in" : "query",
          "description" : "Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "superProcessInstance",
          "in" : "query",
          "description" : "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "businessKey",
          "in" : "query",
          "description" : "Filter by process instance business key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include process instances which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentId",
          "in" : "query",
          "description" : "Filter by the incident id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessageLike",
          "in" : "query",
          "description" : "Filter by the incident message that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Queries for process instances that fulfill given parameters through a JSON object.",
        "description" : "Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.",
        "operationId" : "queryProcessInstances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProcessInstanceQueryDto"
          }
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/count" : {
      "get" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Queries for the number of process instances that fulfill given parameters.",
        "description" : "Queries for the number of process instances that fulfill given parameters. Takes the same parameters as the Get Instances method.",
        "operationId" : "getProcessInstancesCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Filter by the process definition the instances run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variables",
          "in" : "query",
          "description" : "Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessage",
          "in" : "query",
          "description" : "Filter by the incident message. Exact match.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "businessKeyLike",
          "in" : "query",
          "description" : "Filter by process instance business key that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subProcessInstance",
          "in" : "query",
          "description" : "Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "superCaseInstance",
          "in" : "query",
          "description" : "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceId",
          "in" : "query",
          "description" : "Filter by case instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentType",
          "in" : "query",
          "description" : "Filter by the incident type. See the User Guide for a list of incident types.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Only include active process instances. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceIds",
          "in" : "query",
          "description" : "Filter by a comma-separated list of process instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "Only include suspended process instances. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Filter by the key of the process definition the instances run on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subCaseInstance",
          "in" : "query",
          "description" : "Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "superProcessInstance",
          "in" : "query",
          "description" : "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Filter by the deployment the id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "businessKey",
          "in" : "query",
          "description" : "Filter by process instance business key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include process instances which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentId",
          "in" : "query",
          "description" : "Filter by the incident id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "incidentMessageLike",
          "in" : "query",
          "description" : "Filter by the incident message that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityIdIn",
          "in" : "query",
          "description" : "Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Queries for the number of process instances that fulfill the given parameters.",
        "description" : "Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) and therefore it is slightly more powerful than the Get Instance Count method.",
        "operationId" : "queryProcessInstancesCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProcessInstanceQueryDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/delete" : {
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Deletes multiple process instances asynchronously (batch).",
        "description" : "Deletes multiple process instances asynchronously (batch).",
        "operationId" : "deleteAsync",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeleteProcessInstancesDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor processInstanceQuery is present. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/delete-historic-query-based" : {
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Deletes a set of process instances asynchronously (batch) based on a historic process instance query.",
        "description" : "Deletes a set of process instances asynchronously (batch) based on a historic process instance query.",
        "operationId" : "deleteAsyncHistoricQueryBased",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeleteProcessInstancesDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, e. g. neither processInstanceIds, nor historicProcessInstanceQuery is present. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/job-retries" : {
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Create a batch to set retries of jobs associated with given processes asynchronously.",
        "description" : "Create a batch to set retries of jobs associated with given processes asynchronously.",
        "operationId" : "setRetriesByProcess",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter setJobRetriesDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetJobRetriesByProcessDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor processInstanceQuery is present. Or if the retry count is not specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/job-retries-historic-query-based" : {
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Create a batch to set retries of jobs asynchronously based on a historic process instance query.",
        "description" : "Create a batch to set retries of jobs asynchronously based on a historic process instance query.",
        "operationId" : "setRetriesByProcessHistoricQueryBased",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter setJobRetriesDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetJobRetriesByProcessDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, e. g. if neither processInstances, nor processInstanceQuery is present. Or if the retry count is not specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/suspended" : {
      "put" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Activates or suspends process instances with the given process definition id.",
        "description" : "Activates or suspends process instances with the given process definition id.",
        "operationId" : "updateInstanceSuspensionState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProcessInstanceSuspensionStateDto"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if some of the request parameters are invalid, for example if the provided processDefinitionId parameter is null. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/suspended-async" : {
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Update Suspension State Async.",
        "description" : "Update Suspension State Async",
        "operationId" : "updateSuspensionStateAsync",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/process-instance/{id}" : {
      "get" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.",
        "description" : "Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.",
        "operationId" : "getProcessInstance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Process instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Deletes a running process instance by id.",
        "description" : "Deletes a running process instance by id.",
        "operationId" : "deleteProcessInstance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "skipCustomListeners",
          "in" : "query",
          "description" : "Parameter skipCustomListeners",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "skipIoMappings",
          "in" : "query",
          "description" : "Parameter skipIoMappings",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "skipSubprocesses",
          "in" : "query",
          "description" : "Parameter skipSubprocesses",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Process instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/{id}/activity-instances" : {
      "get" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Retrieves an Activity Instance (Tree) for a given process instance by id.",
        "description" : "Retrieves an Activity Instance (Tree) for a given process instance by id.",
        "operationId" : "getActivityInstanceTree",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ActivityInstanceDto"
            }
          },
          "404" : {
            "description" : "Process instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/{id}/modification" : {
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Submits a list of modification instructions to change a process instance's execution state.",
        "description" : "Submits a list of modification instructions to change a process instance's execution state. A modification instruction is one of the following:\nStarting execution before an activity Starting execution after an activity on its single outgoing sequence flow Starting execution on a specific sequence flow Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity\nInstructions are executed immediately and in the order they are provided in this request's body. Variables can be provided with every starting instruction.\nThe exact semantics of modification can be read about in the user guide.",
        "operationId" : "modifyProcessInstance",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProcessInstanceModificationDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "At least one modification instruction misses required parameters."
          },
          "500" : {
            "description" : "The modification cannot be performed, for example because it starts a failing activity."
          }
        }
      }
    },
    "/process-instance/{id}/suspended" : {
      "put" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Activates or suspends a given process instance by id.",
        "description" : "Activates or suspends a given process instance by id.",
        "operationId" : "updateInstanceSuspensionStateId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ProcessInstanceSuspensionStateDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          }
        }
      }
    },
    "/process-instance/{id}/variables" : {
      "get" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Retrieves all variables of a given process instance by id.",
        "description" : "Retrieves all variables of a given process instance by id.",
        "operationId" : "getVariablesResource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "Process instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Updates or deletes the variables in the context of a case execution.",
        "description" : "Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy. Please note: deletion precedes update.",
        "operationId" : "modifyProccessVariables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter patch",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PatchVariablesDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "Update or deletion could not be executed, for example because the case execution does not exist."
          }
        }
      }
    },
    "/process-instance/{id}/variables/{varId}" : {
      "get" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Retrieves a variable from the context of a given case execution.",
        "description" : "Retrieves a variable from the context of a given case execution. Does not traverse the parent case execution hierarchy.",
        "operationId" : "getProcessVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deserializeValue",
          "in" : "query",
          "description" : "Parameter deserializeValue",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/VariableValueDto"
            }
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Sets a variable in the context of a given case execution.",
        "description" : "Sets a variable in the context of a given case execution. Update does not propagate upwards in the case execution hierarchy.",
        "operationId" : "putProcessVariable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter variable",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Deletes a variable in the context of a given case execution.",
        "description" : "Deletes a variable in the context of a given case execution. Deletion does not propagate upwards in the case execution hierarchy.",
        "operationId" : "deleteProcessVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          }
        }
      }
    },
    "/process-instance/{id}/variables/{varId}/data" : {
      "get" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Retrieves a binary variable from the context of a given case execution.",
        "description" : "Retrieves a binary variable from the context of a given case execution. Does not traverse the parent case execution hierarchy. Applicable for byte array and file variables.",
        "operationId" : "getProcessVariableBinary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Variable with given id exists but is not a binary variable. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Process Instance" ],
        "summary" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "description" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "operationId" : "setProcessBinaryVariable",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter multipartFormData",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormData"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter processInstanceId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if no filename is set. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Queries for tasks that fulfill a given filter.",
        "description" : "Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.There are several query parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "task.fetch",
        "produces" : [ "application/json", "application/hal+json" ],
        "parameters" : [ {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "assigneeExpression",
          "in" : "query",
          "description" : "Restrict to tasks that the user described by the given expression is assigned to. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionKey",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a case definition with the given key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionName",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a process definition with the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "involvedUserExpression",
          "in" : "query",
          "description" : "Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "unassigned",
          "in" : "query",
          "description" : "If set to true, restricts the query to all tasks that are unassigned.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionName",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a case definition with the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "candidateUserExpression",
          "in" : "query",
          "description" : "Only include tasks that are offered to the user described by the given expression. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a process definition with the given key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAssignedTasks",
          "in" : "query",
          "description" : "Also include tasks that are assigned to users in candidate queries. Default is to only include tasks that are not assigned to any user if you query by candidate user or group(s).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Only include tasks which belong to one of the passed and comma-separated tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceBusinessKey",
          "in" : "query",
          "description" : "Restrict to tasks that belong to process instances with the given business key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceBusinessKeyLike",
          "in" : "query",
          "description" : "Restrict to tasks that have a case instance business key that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionNameLike",
          "in" : "query",
          "description" : "Restrict to tasks that have a case definition name that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "assigneeLikeExpression",
          "in" : "query",
          "description" : "Restrict to tasks that have an assignee that has the parameter value described by the given expression as a substring. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Restrict to tasks that the given user owns.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to process instances with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a process definition with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionNameLike",
          "in" : "query",
          "description" : "Restrict to tasks that have a process definition name that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceBusinessKey",
          "in" : "query",
          "description" : "Restrict to tasks that belong to case instances with the given business key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseExecutionId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a case execution with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "candidateGroupExpression",
          "in" : "query",
          "description" : "Only include tasks that are offered to the group described by the given expression. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name": "candidateGroups",
          "in": "query",
          "type": "string",
          "description": "Restrict to tasks that are offered to any of the given candidate groups. Takes a\ncomma-separated list of group names, so for example `developers,support,sales`."
        }, {
            "name": "taskVariables",
            "in": "query",
            "type": "string",
            "description": "Only include tasks that have variables with certain values. Variable filtering\nexpressions are comma-separated and are structured as follows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
          }, {
            "name": "processVariables",
            "in": "query",
            "type": "string",
            "description": "Only include tasks that belong to process instances that have variables with certain \nvalues. Variable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
          }, {
          "name" : "processDefinitionKeyIn",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a process definition with one of the given keys. The keys need to be in a comma-separated list.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a case definition with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to case instances with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "assigneeLike",
          "in" : "query",
          "description" : "Restrict to tasks that have an assignee that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ownerExpression",
          "in" : "query",
          "description" : "Restrict to tasks that the user described by the given expression owns. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceBusinessKeyIn",
          "in" : "query",
          "description" : "Restrict to tasks that belong to process instances with one of the give business keys. The keys need to be in a comma-separated list.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "candidateGroup",
          "in" : "query",
          "description" : "Only include tasks that are offered to the given group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to an execution with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "candidateUser",
          "in" : "query",
          "description" : "Only include tasks that are offered to the given user or to one of his groups.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceBusinessKeyLike",
          "in" : "query",
          "description" : "Restrict to tasks that have a process instance business key that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityInstanceIdIn",
          "in" : "query",
          "description" : "Only include tasks which belong to one of the passed and comma-separated activity instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include tasks which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "assigned",
          "in" : "query",
          "description" : "If set to true, restricts the query to all tasks that are assigned.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "assignee",
          "in" : "query",
          "description" : "Restrict to tasks that the given user is assigned to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "involvedUser",
          "in" : "query",
          "description" : "Only include tasks that the given user is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are instanceId, caseInstanceId, dueDate, executionId, caseExecutionId,assignee, created, description, id, name, nameCaseInsensitive and priority. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name": "createdAfter",
          "in": "query",
          "type": "string",
          "description": "Restrict to tasks that were created after the given date. By\n[default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`."
        }, {
          "name": "createdBefore",
          "in": "query",
          "type": "string",
          "description": "Restrict to tasks that were created before the given date. By\n[default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`."
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful. In case of an expected HAL response.",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Queries for tasks that fulfill a given filter.",
        "description" : "Queries for tasks that fulfill a given filter. This method is slightly more powerful than the Get Tasks method because it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`. The size of the result set can be retrieved by using the Get Task Count (POST) method.There are several parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "queryTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TaskQueryDto"
          }
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/count" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves the number of tasks that fulfill a provided filter.",
        "description" : "Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the Get Tasks method.There are several query parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "task.count",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "assigneeExpression",
          "in" : "query",
          "description" : "Restrict to tasks that the user described by the given expression is assigned to. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionKey",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a case definition with the given key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionName",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a process definition with the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "involvedUserExpression",
          "in" : "query",
          "description" : "Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "unassigned",
          "in" : "query",
          "description" : "If set to true, restricts the query to all tasks that are unassigned.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionName",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a case definition with the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "candidateUserExpression",
          "in" : "query",
          "description" : "Only include tasks that are offered to the user described by the given expression. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKey",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a process definition with the given key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeAssignedTasks",
          "in" : "query",
          "description" : "Also include tasks that are assigned to users in candidate queries. Default is to only include tasks that are not assigned to any user if you query by candidate user or group(s).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Only include tasks which belong to one of the passed and comma-separated tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceBusinessKey",
          "in" : "query",
          "description" : "Restrict to tasks that belong to process instances with the given business key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceBusinessKeyLike",
          "in" : "query",
          "description" : "Restrict to tasks that have a case instance business key that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionNameLike",
          "in" : "query",
          "description" : "Restrict to tasks that have a case definition name that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "assigneeLikeExpression",
          "in" : "query",
          "description" : "Restrict to tasks that have an assignee that has the parameter value described by the given expression as a substring. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Restrict to tasks that the given user owns.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to process instances with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a process definition with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionNameLike",
          "in" : "query",
          "description" : "Restrict to tasks that have a process definition name that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceBusinessKey",
          "in" : "query",
          "description" : "Restrict to tasks that belong to case instances with the given business key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseExecutionId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a case execution with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "candidateGroupExpression",
          "in" : "query",
          "description" : "Only include tasks that are offered to the group described by the given expression. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processDefinitionKeyIn",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a process definition with one of the given keys. The keys need to be in a comma-separated list.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseDefinitionId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to a case definition with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to case instances with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "assigneeLike",
          "in" : "query",
          "description" : "Restrict to tasks that have an assignee that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ownerExpression",
          "in" : "query",
          "description" : "Restrict to tasks that the user described by the given expression owns. See the user guide for more information on available functions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceBusinessKeyIn",
          "in" : "query",
          "description" : "Restrict to tasks that belong to process instances with one of the give business keys. The keys need to be in a comma-separated list.",
          "required" : false,
          "type" : "string"
        }, {
          "name": "candidateGroups",
          "in": "query",
          "type": "string",
          "description": "Restrict to tasks that are offered to any of the given candidate groups. Takes a\ncomma-separated list of group names, so for example `developers,support,sales`."
        }, {
          "name" : "candidateGroup",
          "in" : "query",
          "description" : "Only include tasks that are offered to the given group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "query",
          "description" : "Restrict to tasks that belong to an execution with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "candidateUser",
          "in" : "query",
          "description" : "Only include tasks that are offered to the given user or to one of his groups.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceBusinessKeyLike",
          "in" : "query",
          "description" : "Restrict to tasks that have a process instance business key that has the parameter value as a substring.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityInstanceIdIn",
          "in" : "query",
          "description" : "Only include tasks which belong to one of the passed and comma-separated activity instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "Only include tasks which belong to no tenant. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "assigned",
          "in" : "query",
          "description" : "If set to true, restricts the query to all tasks that are assigned.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "assignee",
          "in" : "query",
          "description" : "Restrict to tasks that the given user is assigned to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "involvedUser",
          "in" : "query",
          "description" : "Only include tasks that the given user is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee).",
          "required" : false,
          "type" : "string"
        }],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves the number of tasks that fulfill the given filter.",
        "description" : "Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the Get Tasks (POST) method and takes the same parameters.There are several query parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.",
        "operationId" : "queryTasksCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TaskQueryDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/create" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Creates a new task.",
        "description" : "Creates a new task.",
        "operationId" : "createTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter taskDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TaskDto"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if a not valid delegationState is supplied. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/report" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Get Task Report Resource.",
        "description" : "Get Task Report Resource",
        "operationId" : "getTaskReportResource",
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/task/report/candidate-group-count" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves the number of tasks for each candidate group.",
        "description" : "Retrieves the number of tasks for each candidate group.",
        "operationId" : "getTaskCountByCandidateGroupReport",
        "produces" : [ "application/json", "text/csv", "application/csv" ],
        "responses" : {
          "200" : {
            "description" : "Request successful. In case of an expected application/csv or text/csv response to retrieve the result as a csv file."
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid or mandatory parameters are not supplied. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "If the authenticated user is unauthorized to read the history. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves a task by id.",
        "description" : "Retrieves a task by id.",
        "operationId" : "task.get",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful. In case of an expected HAL response."
          },
          "404" : {
            "description" : "Task with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Task" ],
        "summary" : "Updates a task.",
        "description" : "Updates a task.",
        "operationId" : "updateTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter task",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TaskDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Returned if a not valid delegationState is supplied. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "If the corresponding task cannot be found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Task" ],
        "summary" : "Delete Task.",
        "description" : "Delete Task",
        "operationId" : "deleteTask",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/task/{id}/assignee" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Changes the assignee of a task to a specific user.",
        "description" : "Changes the assignee of a task to a specific user.Note: The difference with the Claim Task method is that this method does not check if the task already has a user assigned to it.",
        "operationId" : "setAssignee",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserIdDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "Task with given id does not exist or setting the assignee was not successful. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/attachment" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Gets the attachments for a task.",
        "description" : "Gets the attachments for a task.",
        "operationId" : "getAttachmentResource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "No task exists for the given task id. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/attachment/create" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Creates an attachment for a task.",
        "description" : "Creates an attachment for a task.",
        "operationId" : "addAttachment",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter multipartFormData",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormData"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AttachmentDto"
            }
          }
        }
      }
    },
    "/task/{id}/attachment/{attachmentId}" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves a task attachment by task id and attachment id.",
        "description" : "Retrieves a task attachment by task id and attachment id.",
        "operationId" : "getAttachment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "Parameter attachmentId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/AttachmentDto"
            }
          },
          "404" : {
            "description" : "The attachment for given task and attachment id does not exist or the history of the engine is disabled. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Task" ],
        "summary" : "Removes an attachment from a task by id.",
        "description" : "Removes an attachment from a task by id.",
        "operationId" : "deleteAttachment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "Parameter attachmentId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "The history of the engine is disabled. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Task attachment for given task id and attachment id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/attachment/{attachmentId}/data" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves the binary content of a task attachment by task id and attachment id.",
        "description" : "Retrieves the binary content of a task attachment by task id and attachment id.",
        "operationId" : "getAttachmentData",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "Parameter attachmentId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/InputStream"
            }
          },
          "404" : {
            "description" : "The attachment content for given task and attachment id does not exist or the history of the engine is disabled. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/claim" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Claims a task for a specific user.",
        "description" : "Claims a task for a specific user.Note: The difference with the Set Assignee method is that here a check is performed to see if the task already has a user assigned to it.",
        "operationId" : "task.claim",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserIdDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "Task with given id does not exist or claiming was not successful. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/comment" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Gets the comments for a task by id.",
        "description" : "Gets the comments for a task by id.",
        "operationId" : "getTaskCommentResource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "No task exists for the given task id. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/comment/create" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Creates a comment for a task by id.",
        "description" : "Creates a comment for a task by id.",
        "operationId" : "createComment",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter comment",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CommentDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CommentDto"
            }
          },
          "400" : {
            "description" : "The task does not exist or no comment message was submitted. See the Introduction for the error response format."
          },
          "403" : {
            "description" : "The history of the engine is disabled. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/comment/{commentId}" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves a task comment by task id and comment id.",
        "description" : "Retrieves a task comment by task id and comment id.",
        "operationId" : "getComment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "commentId",
          "in" : "path",
          "description" : "Parameter commentId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CommentDto"
            }
          },
          "404" : {
            "description" : "The task or comment with given task and comment id do not exist, or the history of the engine is disabled. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/complete" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Completes a task and updates process variables.",
        "description" : "Completes a task and updates process variables.",
        "operationId" : "task.complete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CompleteTaskDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "If the task does not exist or the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/delegate" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Delegates a task to another user.",
        "description" : "Delegates a task to another user.",
        "operationId" : "delegate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter delegatedUser",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserIdDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "If the task does not exist or delegation was not successful. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/deployed-form" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Get Deployed Form.",
        "description" : "Get Deployed Form",
        "operationId" : "getDeployedForm",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/task/{id}/form" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves the form key for a task.",
        "description" : "Retrieves the form key for a task. The form key corresponds to the `FormData#formKey` property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.",
        "operationId" : "getForm",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/FormDto"
            }
          },
          "400" : {
            "description" : "Task with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/form-variables" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves the form variables for a task (only if they are defined via the Generated Task Form approach).",
        "description" : "Retrieves the form variables for a task (only if they are defined via the Generated Task Form approach). The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        "operationId" : "getTaskFormVariables",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "variableNames",
          "in" : "query",
          "description" : "Parameter variableNames",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deserializeValues",
          "in" : "query",
          "description" : "Parameter deserializeValues",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "404" : {
            "description" : "Task id is null or does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/identity-links" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Gets the identity links for a task by id, which are the users and groups that are in some relation to it (including assignee and owner).",
        "description" : "Gets the identity links for a task by id, which are the users and groups that are in some relation to it (including assignee and owner).",
        "operationId" : "getIdentityLinks",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Parameter type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Task with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Adds an identity link to a task by id.",
        "description" : "Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.",
        "operationId" : "addIdentityLink",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter identityLink",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/IdentityLinkDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Task with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/identity-links/delete" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Removes an identity link from a task by id.",
        "description" : "Removes an identity link from a task by id.",
        "operationId" : "deleteIdentityLink",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter identityLink",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/IdentityLinkDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Task with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/localVariables" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves all variables of a given task by id.",
        "description" : "Retrieves all variables of a given task by id.",
        "operationId" : "getTaskLocalVariables",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "Task id is null or does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Updates or deletes the variables in the context of a case execution.",
        "description" : "Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy. Please note: deletion precedes update.",
        "operationId" : "modifyTaskVariables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter patch",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PatchVariablesDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "Update or deletion could not be executed, for example because the case execution does not exist."
          }
        }
      }
    },
    "/task/{id}/localVariables/{varId}" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves a variable from the context of a given case execution.",
        "description" : "Retrieves a variable from the context of a given case execution. Does not traverse the parent case execution hierarchy.",
        "operationId" : "getTaskVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deserializeValue",
          "in" : "query",
          "description" : "Parameter deserializeValue",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/VariableValueDto"
            }
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Task" ],
        "summary" : "Sets a variable in the context of a given case execution.",
        "description" : "Sets a variable in the context of a given case execution. Update does not propagate upwards in the case execution hierarchy.",
        "operationId" : "putLocalVariable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter variable",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Task" ],
        "summary" : "Deletes a variable in the context of a given case execution.",
        "description" : "Deletes a variable in the context of a given case execution. Deletion does not propagate upwards in the case execution hierarchy.",
        "operationId" : "deleteVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          }
        }
      }
    },
    "/task/{id}/localVariables/{varId}/data" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves a binary variable from the context of a given case execution.",
        "description" : "Retrieves a binary variable from the context of a given case execution. Does not traverse the parent case execution hierarchy. Applicable for byte array and file variables.",
        "operationId" : "getTaskVariableBinary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Variable with given id exists but is not a binary variable. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "description" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "operationId" : "setTaskBinaryVariable",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter multipartFormData",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormData"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if no filename is set. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/rendered-form" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves the rendered form for a task.",
        "description" : "Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a Generated Task Form.",
        "operationId" : "getTaskRenderedForm",
        "produces" : [ "application/xhtml+xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The task with the given id does not exist or has no form field metadata defined for this task. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/resolve" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Resolves a task and updates execution variables.",
        "description" : "Resolves a task and updates execution variables.",
        "operationId" : "resolve",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CompleteTaskDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "If the task does not exist or the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/submit-form" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Completes a task and updates process variables using a form submit.",
        "description" : "Completes a task and updates process variables using a form submit. There are two difference between this method and the `complete` method:* If the task is in state `PENDING` - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed.\n* If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms]() section of the [User Guide]() for more information.",
        "operationId" : "submit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter dto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CompleteTaskDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "If the task does not exist or the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/unclaim" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Resets a task's assignee.",
        "description" : "Resets a task's assignee. If successful, the task is not assigned to a user.",
        "operationId" : "task.unclaim",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Task with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/variables" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves all variables visible from the task.",
        "description" : "Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.",
        "operationId" : "variables.get",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "500" : {
            "description" : "Task id is null or does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Updates or deletes the variables in the context of a case execution.",
        "description" : "Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy. Please note: deletion precedes update.",
        "operationId" : "modifyVariables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter patch",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PatchVariablesDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500" : {
            "description" : "Update or deletion could not be executed, for example because the case execution does not exist."
          }
        }
      }
    },
    "/task/{id}/variables/{varId}" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves a variable from the context of a given case execution.",
        "description" : "Retrieves a variable from the context of a given case execution. Does not traverse the parent case execution hierarchy.",
        "operationId" : "getVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deserializeValue",
          "in" : "query",
          "description" : "Parameter deserializeValue",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/VariableValueDto"
            }
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Task" ],
        "summary" : "Sets a variable in the context of a given case execution.",
        "description" : "Sets a variable in the context of a given case execution. Update does not propagate upwards in the case execution hierarchy.",
        "operationId" : "putTaskVariable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter variable",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Task" ],
        "summary" : "Deletes a variable in the context of a given case execution.",
        "description" : "Deletes a variable in the context of a given case execution. Deletion does not propagate upwards in the case execution hierarchy.",
        "operationId" : "deleteTaskVariable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          }
        }
      }
    },
    "/task/{id}/variables/{varId}/data" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Retrieves a binary variable from the context of a given case execution.",
        "description" : "Retrieves a binary variable from the context of a given case execution. Does not traverse the parent case execution hierarchy. Applicable for byte array and file variables.",
        "operationId" : "getVariableBinary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "Variable with given id exists but is not a binary variable. See the Introduction for the error response format."
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "description" : "Sets the serialized value for a binary variable or the binary value for a file variable.",
        "operationId" : "setBinaryVariable",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "varId",
          "in" : "path",
          "description" : "Parameter variableName",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter multipartFormData",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormData"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "The variable value or type is invalid, for example if no filename is set. See the Introduction for the error response format."
          }
        }
      }
    },
    "/tenant" : {
      "get" : {
        "tags" : [ "Tenant" ],
        "summary" : "Query for a list of tenants using a list of parameters.",
        "description" : "Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the Get Tenant Count method.",
        "operationId" : "queryTenants",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by the name that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userMember",
          "in" : "query",
          "description" : "Select only tenants where the given user is a member of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupMember",
          "in" : "query",
          "description" : "Select only tenants where the given group is a member of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by the name of the tenant.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are id and name. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by the id of the tenant.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includingGroupsOfUser",
          "in" : "query",
          "description" : "Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the userMember parameter. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "Tenant" ],
        "summary" : "The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances.",
        "description" : "The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/tenant/count" : {
      "get" : {
        "tags" : [ "Tenant" ],
        "summary" : "Query for tenants using a list of parameters and retrieves the count.",
        "description" : "Query for tenants using a list of parameters and retrieves the count.",
        "operationId" : "getTenantCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Filter by the name that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userMember",
          "in" : "query",
          "description" : "Select only tenants where the given user is a member of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupMember",
          "in" : "query",
          "description" : "Select only tenants where the given group is a member of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter by the name of the tenant.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by the id of the tenant.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includingGroupsOfUser",
          "in" : "query",
          "description" : "Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the userMember parameter. Value may only be true, as false is the default behavior.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid. See the Introduction for the error response format."
          }
        }
      }
    },
    "/tenant/create" : {
      "post" : {
        "tags" : [ "Tenant" ],
        "summary" : "Create a new tenant.",
        "description" : "Create a new tenant.",
        "operationId" : "createTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter tenant",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TenantDto"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only."
          },
          "500" : {
            "description" : "The tenant could not be created due to an internal server error. See the Introduction for the error response format."
          }
        }
      }
    },
    "/tenant/{id}" : {
      "get" : {
        "tags" : [ "Tenant" ],
        "summary" : "Retrieves a tenant.",
        "description" : "Retrieves a tenant.",
        "operationId" : "getTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Tenant with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "Tenant" ],
        "summary" : "Updates a given tenant.",
        "description" : "Updates a given tenant.",
        "operationId" : "updateTenant",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter tenant",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TenantDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only."
          },
          "404" : {
            "description" : "If the tenant with the requested Id cannot be found."
          },
          "500" : {
            "description" : "The tenant could not be updated due to an internal server error. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Tenant" ],
        "summary" : "Deletes a tenant by id.",
        "description" : "Deletes a tenant by id.",
        "operationId" : "deleteTenant",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only."
          },
          "404" : {
            "description" : "Tenant cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "Tenant" ],
        "summary" : "The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances.",
        "description" : "The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/tenant/{id}/group-members" : {
      "get" : {
        "tags" : [ "Tenant" ],
        "summary" : "Get Tenant Group Members Resource.",
        "description" : "Get Tenant Group Members Resource",
        "operationId" : "getTenantGroupMembersResource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "options" : {
        "tags" : [ "Tenant" ],
        "summary" : "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource.",
        "description" : "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/tenant/{id}/group-members/{groupId}" : {
      "put" : {
        "tags" : [ "Tenant" ],
        "summary" : "Creates a membership between a tenant and a group.",
        "description" : "Creates a membership between a tenant and a group.",
        "operationId" : "createGroupMembership",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "Parameter groupId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only."
          },
          "500" : {
            "description" : "In case an internal error occurs. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Tenant" ],
        "summary" : "Deletes a membership between a tenant and a group.",
        "description" : "Deletes a membership between a tenant and a group.",
        "operationId" : "deleteGroupMembership",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "Parameter groupId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only."
          },
          "500" : {
            "description" : "In case an error occurs. See the Introduction for the error response format."
          }
        }
      }
    },
    "/tenant/{id}/user-members" : {
      "get" : {
        "tags" : [ "Tenant" ],
        "summary" : "Get Tenant User Members Resource.",
        "description" : "Get Tenant User Members Resource",
        "operationId" : "getTenantUserMembersResource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "options" : {
        "tags" : [ "Tenant" ],
        "summary" : "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource.",
        "description" : "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/tenant/{id}/user-members/{userId}" : {
      "put" : {
        "tags" : [ "Tenant" ],
        "summary" : "Creates a membership between a tenant and an user.",
        "description" : "Creates a membership between a tenant and an user.",
        "operationId" : "createMembership",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Parameter userId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only."
          },
          "500" : {
            "description" : "In case an internal error occurs. See the Introduction for the error response format."
          }
        }
      },
      "delete" : {
        "tags" : [ "Tenant" ],
        "summary" : "Deletes a membership between a tenant and an user.",
        "description" : "Deletes a membership between a tenant and an user.",
        "operationId" : "deleteMembership",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Parameter userId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only."
          },
          "500" : {
            "description" : "In case an error occurs. See the Introduction for the error response format."
          }
        }
      }
    },
    "/user" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Query for a list of users using a list of parameters.",
        "description" : "Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method.",
        "operationId" : "queryUsers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "lastName",
          "in" : "query",
          "description" : "Filter by the lastname of the user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstNameLike",
          "in" : "query",
          "description" : "Filter by the firstname that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "emailLike",
          "in" : "query",
          "description" : "Filter by the email that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "memberOfTenant",
          "in" : "query",
          "description" : "Filter for users which are members of the given tenant.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstName",
          "in" : "query",
          "description" : "Filter by the firstname of the user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "memberOfGroup",
          "in" : "query",
          "description" : "Filter for users which are members of a group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are userId, firstName, lastName and email. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by the id of the user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastNameLike",
          "in" : "query",
          "description" : "Filter by the lastname that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Filter by the email of the user.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "User" ],
        "summary" : "The `/user` resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances.",
        "description" : "The `/user` resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/user` resource. If the user can perform an operation or not may depend on various things, including the user's authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/user/count" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Query for users using a list of parameters and retrieves the count.",
        "description" : "Query for users using a list of parameters and retrieves the count.",
        "operationId" : "getUserCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "firstName",
          "in" : "query",
          "description" : "Filter by the firstname of the user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastName",
          "in" : "query",
          "description" : "Filter by the lastname of the user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "memberOfGroup",
          "in" : "query",
          "description" : "Filter for users which are members of the given group.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstNameLike",
          "in" : "query",
          "description" : "Filter by the firstname that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter by the id of the user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "emailLike",
          "in" : "query",
          "description" : "Filter by the email that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastNameLike",
          "in" : "query",
          "description" : "Filter by the lastname that the parameter is a substring of.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Filter by the email of the user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "memberOfTenant",
          "in" : "query",
          "description" : "Filter for users which are members of the given tenant.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/user/create" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Create a new user.",
        "description" : "Create a new user.",
        "operationId" : "createUser",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter userDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserDto"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "500" : {
            "description" : "The user could not be created due to an internal server error. See the Introduction for the error response format."
          }
        }
      }
    },
    "/user/{id}" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Get User.",
        "description" : "Get User",
        "operationId" : "getUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "User" ],
        "summary" : "Deletes a user by id.",
        "description" : "Deletes a user by id.",
        "operationId" : "deleteUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404" : {
            "description" : "User cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options" : {
        "tags" : [ "User" ],
        "summary" : "The `/user` resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances.",
        "description" : "The `/user` resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/user` resource. If the user can perform an operation or not may depend on various things, including the user's authorizations to interact with this resource and the internal context of the process engine.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/user/{id}/credentials" : {
      "put" : {
        "tags" : [ "User" ],
        "summary" : "Updates a user's credentials (password).",
        "description" : "Updates a user's credentials (password).",
        "operationId" : "updateCredentials",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter account",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserCredentialsDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "400" : {
            "description" : "If the authenticated user password does not match."
          },
          "403" : {
            "description" : "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404" : {
            "description" : "If the corresponding user cannot be found"
          },
          "500" : {
            "description" : "The user could not be created due to an internal server error. See the Introduction for the error response format."
          }
        }
      }
    },
    "/user/{id}/profile" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Retrieves a user's profile.",
        "description" : "Retrieves a user's profile.",
        "operationId" : "getUserProfile",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/UserProfileDto"
            }
          },
          "404" : {
            "description" : "Execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put" : {
        "tags" : [ "User" ],
        "summary" : "Updates the profile information of an already existing user.",
        "description" : "Updates the profile information of an already existing user.",
        "operationId" : "updateProfile",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter profile",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserProfileDto"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Request successful."
          },
          "403" : {
            "description" : "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404" : {
            "description" : "If the user with the requested Id cannot be found."
          },
          "500" : {
            "description" : "The user could not be updated due to an internal server error. See the Introduction for the error response format."
          }
        }
      }
    },
    "/variable-instance" : {
      "get" : {
        "tags" : [ "Variable" ],
        "summary" : "Query for variable instances that fulfill given parameters.",
        "description" : "Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the Get Variable Instance Count method.",
        "operationId" : "getVariableInstances",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "deserializeValues",
          "in" : "query",
          "description" : "Parameter deserializeObjectValues",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "variableName",
          "in" : "query",
          "description" : "Filter by variable instance name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executionIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated execution ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed case instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated process instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "taskIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated task ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variableValues",
          "in" : "query",
          "description" : "Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityInstanceIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated activity instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variableNameLike",
          "in" : "query",
          "description" : "Filter by the variable instance name. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are variableName, variableType, activityInstanceId and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseExecutionIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed case execution ids.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Variable" ],
        "summary" : "Query for variable instances that fulfill given parameters through a JSON object.",
        "description" : "Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Variable Instances method because it allows filtering by multiple variable instances of types `String`, `Number` or `Boolean`.",
        "operationId" : "queryVariableInstances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter queryDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableInstanceQueryDto"
          }
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Parameter firstResult",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Parameter maxResults",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "deserializeValues",
          "in" : "query",
          "description" : "Parameter deserializeObjectValues",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/variable-instance/count" : {
      "get" : {
        "tags" : [ "Variable" ],
        "summary" : "Query for the number of variable instances that fulfill given parameters.",
        "description" : "Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the Get Variable Instances method.",
        "operationId" : "getVariableInstancesCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "variableName",
          "in" : "query",
          "description" : "Filter by variable instance name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "executionIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated execution ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseInstanceIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed case instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "firstResult",
          "in" : "query",
          "description" : "Pagination of results. Specifies the index of the first result to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "processInstanceIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated process instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "taskIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated task ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variableValues",
          "in" : "query",
          "description" : "Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated tenant ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResults",
          "in" : "query",
          "description" : "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "activityInstanceIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed and comma-separated activity instance ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "variableNameLike",
          "in" : "query",
          "description" : "Filter by the variable instance name. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort the results lexicographically by a given criterion. Valid values are variableName, variableType, activityInstanceId and tenantId. Must be used in conjunction with the sortOrder parameter.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseExecutionIdIn",
          "in" : "query",
          "description" : "Only include variable instances which belong to one of the passed case execution ids.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post" : {
        "tags" : [ "Variable" ],
        "summary" : "Query for the number of variable instances that fulfill given parameters.",
        "description" : "Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the Get Variable Instances (POST) method and therefore it is slightly more powerful than the Get Variable Instance Count method.",
        "operationId" : "queryVariableInstancesCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Parameter queryDto",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/VariableInstanceQueryDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful.",
            "schema" : {
              "$ref" : "#/definitions/CountResultDto"
            }
          },
          "400" : {
            "description" : "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/variable-instance/{id}" : {
      "get" : {
        "tags" : [ "Variable" ],
        "summary" : "Retrieves a variable by id.",
        "description" : "Retrieves a variable by id.",
        "operationId" : "getVariableInstance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request successful."
          },
          "404" : {
            "description" : "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/variable-instance/{id}/data" : {
      "get" : {
        "tags" : [ "Variable" ],
        "summary" : "Retrieves the content of a variable by id.",
        "description" : "Retrieves the content of a variable by id. Applicable for byte array and file variables.",
        "operationId" : "getResourceBinary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parameter id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    }
  },
  "definitions" : {
    "AbstractQueryDto" : {
      "type" : "object",
      "properties" : {
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "AbstractQueryDtoObject" : {
      "type" : "object",
      "properties" : {
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "ActivityInstanceDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the activity instance."
        },
        "parentActivityInstanceId" : {
          "type" : "string"
        },
        "activityId" : {
          "type" : "string",
          "description" : "The id of the activity."
        },
        "activityType" : {
          "type" : "string",
          "description" : "The type of activity (corresponds to the XML element name in the BPMN 2.0, e.g., 'userTask')."
        },
        "processInstanceId" : {
          "type" : "string",
          "description" : "The id of the process instance this activity instance is part of."
        },
        "processDefinitionId" : {
          "type" : "string",
          "description" : "The id of the process definition."
        },
        "childActivityInstances" : {
          "type" : "array",
          "description" : "A list of child activity instances.",
          "items" : {
            "$ref" : "#/definitions/ActivityInstanceDto"
          }
        },
        "childTransitionInstances" : {
          "type" : "array",
          "description" : "A list of child transition instances. A transition instance represents an execution waiting in an asynchronous continuation.",
          "items" : {
            "$ref" : "#/definitions/TransitionInstanceDto"
          }
        },
        "executionIds" : {
          "type" : "array",
          "description" : "A list of execution ids.",
          "items" : {
            "type" : "string"
          }
        },
        "activityName" : {
          "type" : "string",
          "description" : "The name of the activity."
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "AtomLink" : {
      "type" : "object",
      "properties" : {
        "method" : {
          "type" : "string"
        },
        "href" : {
          "type" : "string"
        },
        "rel" : {
          "type" : "string"
        }
      }
    },
    "AttachmentDto" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AtomLink"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the task attachment."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the task attachment."
        },
        "description" : {
          "type" : "string",
          "description" : "The description of the task attachment."
        },
        "taskId" : {
          "type" : "string",
          "description" : "The id of the task to which the attachment belongs."
        },
        "type" : {
          "type" : "string",
          "description" : "Indication of the type of content that this attachment refers to. Can be MIME type or any other indication."
        },
        "url" : {
          "type" : "string",
          "description" : "The url to the remote content of the task attachment."
        }
      }
    },
    "AuthenticationResult" : {
      "type" : "object",
      "properties" : {
        "authenticatedUser" : {
          "type" : "string"
        },
        "authenticated" : {
          "type" : "boolean"
        }
      }
    },
    "AuthorizationCheckResultDto" : {
      "type" : "object",
      "properties" : {
        "permissionName" : {
          "type" : "string",
          "description" : "Name of the permission which was checked."
        },
        "resourceName" : {
          "type" : "string",
          "description" : "The name of the resource for which the permission check was performed."
        },
        "resourceId" : {
          "type" : "string",
          "description" : "The id of the resource for which the permission check was performed."
        },
        "authorized" : {
          "type" : "boolean"
        }
      }
    },
    "AuthorizationCreateDto" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The type of the authorization. (0=global, 1=grant, 2=revoke). See the User Guide for more information about authorization types."
        },
        "permissions" : {
          "type" : "array",
          "description" : "An array of Strings holding the permissions provided by this authorization.",
          "items" : {
            "type" : "string"
          }
        },
        "userId" : {
          "type" : "string",
          "description" : "The id of the user this authorization has been created for. The value \"*\" represents a global authorization ranging over all users."
        },
        "groupId" : {
          "type" : "string",
          "description" : "The id of the group this authorization has been created for."
        },
        "resourceType" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "An integer representing the resource type. See the User Guide for a list of integer representations of resource types."
        },
        "resourceId" : {
          "type" : "string",
          "description" : "The resource Id. The value \"*\" represents an authorization ranging over all instances of a resource."
        }
      }
    },
    "AuthorizationDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the authorization."
        },
        "type" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The type of the authorization (0=global, 1=grant, 2=revoke)."
        },
        "permissions" : {
          "type" : "array",
          "description" : "An array of Strings holding the permissions provided by this authorization.",
          "items" : {
            "type" : "string"
          }
        },
        "userId" : {
          "type" : "string",
          "description" : "The id of the user this authorization has been created for. The value \"*\" represents a global authorization ranging over all users."
        },
        "groupId" : {
          "type" : "string",
          "description" : "The id of the group this authorization has been created for."
        },
        "resourceType" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "An integer representing the resource type. See the User Guide for a list of integer representations of resource types."
        },
        "resourceId" : {
          "type" : "string",
          "description" : "The resource Id. The value \"*\" represents an authorization ranging over all instances of a resource."
        }
      }
    },
    "BasicUserCredentialsDto" : {
      "type" : "object",
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : "The user's new password."
        },
        "authenticatedUserPassword" : {
          "type" : "string",
          "description" : "The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter)."
        },
        "username" : {
          "type" : "string",
          "description" : "The username of a user."
        }
      }
    },
    "BatchDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the created batch."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the created batch."
        },
        "totalJobs" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total jobs of a batch is the number of batch execution jobs required to complete the batch."
        },
        "jobsCreated" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of batch execution jobs already created by the seed job."
        },
        "batchJobsPerSeed" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of batch execution jobs created per seed job invocation. The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property)."
        },
        "invocationsPerBatchJob" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times. E.g., for a process instance modification batch this specifies the number of process instances which are modified per batch execution job."
        },
        "seedJobDefinitionId" : {
          "type" : "string",
          "description" : "The job definition id for the seed jobs of this batch."
        },
        "monitorJobDefinitionId" : {
          "type" : "string",
          "description" : "The job definition id for the monitor jobs of this batch."
        },
        "batchJobDefinitionId" : {
          "type" : "string",
          "description" : "The job definition id for the batch execution jobs of this batch."
        },
        "suspended" : {
          "type" : "boolean"
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The tenant id of the batch."
        }
      }
    },
    "CancellationInstructionDto" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ProcessInstanceModificationInstructionDto"
      }, {
        "type" : "object"
      } ]
    },
    "CaseDefinitionDiagramDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the case definition."
        },
        "cmmnXml" : {
          "type" : "string",
          "description" : "An escaped XML string containing the XML that this case definition was deployed with. Carriage returns, line feeds and quotation marks are escaped."
        }
      }
    },
    "CaseDefinitionDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the case definition."
        },
        "key" : {
          "type" : "string",
          "description" : "The key of the case definition, i.e., the id of the CMMN 2.0 XML case definition."
        },
        "category" : {
          "type" : "string",
          "description" : "The category of the case definition."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the case definition."
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version of the case definition that the engine assigned to it."
        },
        "resource" : {
          "type" : "string",
          "description" : "The file name of the case definition."
        },
        "deploymentId" : {
          "type" : "string",
          "description" : "The deployment id of the case definition."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The tenant id of the case definition."
        },
        "historyTimeToLive" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "History time to live value of the case definition. Is used within History cleanup."
        }
      }
    },
    "CaseExecutionDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the case execution."
        },
        "caseInstanceId" : {
          "type" : "string",
          "description" : "The id of the case instance this case execution belongs to."
        },
        "caseDefinitionId" : {
          "type" : "string",
          "description" : "The id of the case definition this case execution belongs to."
        },
        "activityId" : {
          "type" : "string",
          "description" : "The id of the activity this case execution belongs to."
        },
        "activityName" : {
          "type" : "string",
          "description" : "The name of the activity this case execution belongs to."
        },
        "activityType" : {
          "type" : "string",
          "description" : "The type of the activity this case execution belongs to."
        },
        "activityDescription" : {
          "type" : "string",
          "description" : "The description of the activity this case execution belongs to."
        },
        "parentId" : {
          "type" : "string",
          "description" : "The id of the parent of this case execution belongs to."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The tenant id of the case execution."
        },
        "required" : {
          "type" : "boolean"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "active" : {
          "type" : "boolean"
        },
        "disabled" : {
          "type" : "boolean"
        }
      }
    },
    "CaseExecutionQueryDto" : {
      "type" : "object",
      "properties" : {
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "CaseExecutionTriggerDto" : {
      "type" : "object",
      "properties" : {
        "variables" : {
          "type" : "object",
          "description" : "A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object.",
          "additionalProperties" : {
            "$ref" : "#/definitions/TriggerVariableValueDto"
          }
        },
        "deletions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VariableNameDto"
          }
        }
      }
    },
    "CaseInstanceDto" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AtomLink"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the case instance."
        },
        "caseDefinitionId" : {
          "type" : "string",
          "description" : "The id of the case definition this instance belongs to."
        },
        "businessKey" : {
          "type" : "string",
          "description" : "The business key of the case instance."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The tenant id of the case instance."
        },
        "active" : {
          "type" : "boolean"
        },
        "completed" : {
          "type" : "boolean"
        },
        "terminated" : {
          "type" : "boolean"
        }
      }
    },
    "CommentDto" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AtomLink"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the task comment."
        },
        "userId" : {
          "type" : "string",
          "description" : "The id of the user who created the comment."
        },
        "time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The time when the comment was created."
        },
        "taskId" : {
          "type" : "string",
          "description" : "The id of the task to which the comment belongs."
        },
        "message" : {
          "type" : "string",
          "description" : "The content of the comment."
        }
      }
    },
    "CompleteExternalTaskDto" : {
      "type" : "object",
      "properties" : {
        "workerId" : {
          "type" : "string",
          "description" : "The id of the worker that completes the task. Must match the id of the worker who has most recently locked the task."
        },
        "variables" : {
          "type" : "object",
          "description" : "A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }
      }
    },
    "CompleteTaskDto" : {
      "type" : "object",
      "properties" : {
        "variables" : {
          "type" : "object",
          "description" : "A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }
      }
    },
    "CorrelationMessageDto" : {
      "type" : "object",
      "properties" : {
        "messageName" : {
          "type" : "string",
          "description" : "The name of the message to deliver."
        },
        "businessKey" : {
          "type" : "string",
          "description" : "Used for correlation of process instances that wait for incoming messages. Will only correlate to executions that belong to a process instance with the provided business key."
        },
        "correlationKeys" : {
          "type" : "object",
          "description" : "Used for correlation of process instances that wait for incoming messages. Has to be a JSON object containing key-value pairs that are matched against process instance variables during correlation. Each key is a variable name and each value a JSON variable value object with the following properties.",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        },
        "localCorrelationKeys" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        },
        "processVariables" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        },
        "tenantId" : {
          "type" : "string",
          "description" : "Used to correlate the message for a tenant with the given id. Will only correlate to executions and process definitions which belong to the tenant."
        },
        "withoutTenantId" : {
          "type" : "boolean"
        },
        "processInstanceId" : {
          "type" : "string",
          "description" : "Used to correlate the message to the process instance with the given id. Must not be supplied in conjunction with a tenantId."
        },
        "all" : {
          "type" : "boolean"
        },
        "resultEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "CountResultDto" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of matching executions."
        }
      }
    },
    "CreateCaseInstanceDto" : {
      "type" : "object",
      "properties" : {
        "variables" : {
          "type" : "object",
          "description" : "A JSON object containing the variables the case instance is to be initialized with. Variable names are property keys of this object and variable values are JSON objects with a value and a type property (see example below). Valid variable values are Boolean, Number, String and Date values.",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        },
        "businessKey" : {
          "type" : "string",
          "description" : "The business key the case instance is to be initialized with. The business key uniquely identifies the case instance in the context of the given case definition."
        }
      }
    },
    "DecisionDefinitionDiagramDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the decision definition."
        },
        "dmnXml" : {
          "type" : "string",
          "description" : "An escaped XML string containing the XML that this decision definition was deployed with. Carriage returns, line feeds and quotation marks are escaped."
        }
      }
    },
    "DecisionDefinitionDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the decision definition."
        },
        "key" : {
          "type" : "string",
          "description" : "The key of the decision definition, i.e., the id of the DMN 1.0 XML decision definition."
        },
        "category" : {
          "type" : "string",
          "description" : "The category of the decision definition."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the decision definition."
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version of the decision definition that the engine assigned to it."
        },
        "resource" : {
          "type" : "string",
          "description" : "The file name of the decision definition."
        },
        "deploymentId" : {
          "type" : "string",
          "description" : "The deployment id of the decision definition."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The tenant id of the decision definition."
        },
        "decisionRequirementsDefinitionId" : {
          "type" : "string",
          "description" : "The id of the decision requirements definition this decision definition belongs to."
        },
        "decisionRequirementsDefinitionKey" : {
          "type" : "string",
          "description" : "The key of the decision requirements definition this decision definition belongs to."
        },
        "historyTimeToLive" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "History time to live value of the decision definition. Is used within History cleanup."
        },
        "versionTag" : {
          "type" : "string"
        }
      }
    },
    "DeleteProcessInstancesDto" : {
      "type" : "object",
      "properties" : {
        "processInstanceIds" : {
          "type" : "array",
          "description" : "A list process instance ids to delete.",
          "items" : {
            "type" : "string"
          }
        },
        "processInstanceQuery" : {
          "description" : "A process instance query like the request body described by POST /process-instance .",
          "$ref" : "#/definitions/ProcessInstanceQueryDto"
        },
        "deleteReason" : {
          "type" : "string",
          "description" : "A string with delete reason."
        },
        "skipCustomListeners" : {
          "type" : "boolean"
        },
        "historicProcessInstanceQuery" : {
          "description" : "A historic process instance query like the request body described by POST /history/process-instance .",
          "$ref" : "#/definitions/HistoricProcessInstanceQueryDto"
        },
        "skipSubprocesses" : {
          "type" : "boolean"
        }
      }
    },
    "DeploymentDto" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AtomLink"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the deployment."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the deployment."
        },
        "source" : {
          "type" : "string",
          "description" : "The source of the deployment."
        },
        "deploymentTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date and time of the deployment."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The tenant id of the deployment."
        }
      }
    },
    "DeploymentResourceDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the deployment resource."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the deployment resource."
        },
        "deploymentId" : {
          "type" : "string",
          "description" : "The id of the deployment."
        }
      }
    },
    "EvaluateDecisionDto" : {
      "type" : "object",
      "properties" : {
        "variables" : {
          "type" : "object",
          "description" : "A JSON object containing the variables the decision is to be evaluated with. Each key corresponds to a variable name and each value to a variable value. A variable value is a JSON object with the following properties:",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }
      }
    },
    "EventSubscriptionDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The identifier of the event subscription."
        },
        "eventType" : {
          "type" : "string",
          "description" : "The type of the event. message for message events."
        },
        "eventName" : {
          "type" : "string",
          "description" : "The name of the event the subscription belongs to, as defined in the process model."
        },
        "executionId" : {
          "type" : "string",
          "description" : "The id of the execution the subscription belongs to."
        },
        "processInstanceId" : {
          "type" : "string",
          "description" : "The id of the process instance the subscription belongs to."
        },
        "activityId" : {
          "type" : "string",
          "description" : "The id of the activity that the event subscription belongs to. Corresponds to the id in the process model."
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The time the subscription was created by the engine. Format yyyy-MM-dd'T'HH:mm:ss."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The id of the tenant the subscription belongs to."
        }
      }
    },
    "ExecutionDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the execution."
        },
        "processInstanceId" : {
          "type" : "string",
          "description" : "The id of the process instance that this execution instance belongs to."
        },
        "ended" : {
          "type" : "boolean"
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The tenant id of the execution."
        }
      }
    },
    "ExecutionQueryDto" : {
      "type" : "object",
      "properties" : {
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "ExecutionTriggerDto" : {
      "type" : "object",
      "properties" : {
        "variables" : {
          "type" : "object",
          "description" : "A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object.",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        }
      }
    },
    "ExternalTaskBpmnError" : {
      "type" : "object",
      "properties" : {
        "workerId" : {
          "type" : "string"
        },
        "errorCode" : {
          "type" : "string"
        }
      }
    },
    "ExternalTaskDto" : {
      "type" : "object",
      "properties" : {
        "activityId" : {
          "type" : "string",
          "description" : "The id of the activity that this external task belongs to."
        },
        "activityInstanceId" : {
          "type" : "string",
          "description" : "The id of the activity instance that the external task belongs to."
        },
        "errorMessage" : {
          "type" : "string",
          "description" : "The error message that was supplied when the last failure of this task was reported."
        },
        "errorDetails" : {
          "type" : "string"
        },
        "executionId" : {
          "type" : "string",
          "description" : "The id of the execution that the external task belongs to."
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the external task."
        },
        "lockExpirationTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date that the task's most recent lock expires or has expired."
        },
        "processDefinitionId" : {
          "type" : "string",
          "description" : "The id of the process definition the external task is defined in."
        },
        "processDefinitionKey" : {
          "type" : "string",
          "description" : "The key of the process definition the external task is defined in."
        },
        "processInstanceId" : {
          "type" : "string",
          "description" : "The id of the process instance the external task belongs to."
        },
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of retries the task currently has left."
        },
        "suspended" : {
          "type" : "boolean"
        },
        "workerId" : {
          "type" : "string",
          "description" : "The id of the worker that posesses or posessed the most recent lock."
        },
        "topicName" : {
          "type" : "string",
          "description" : "The topic name of the external task."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The id of the tenant the external task belongs to."
        },
        "priority" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The priority of the external task."
        }
      }
    },
    "ExternalTaskFailureDto" : {
      "type" : "object",
      "properties" : {
        "workerId" : {
          "type" : "string",
          "description" : "The id of the worker that reports the failure. Must match the id of the worker who has most recently locked the task."
        },
        "errorMessage" : {
          "type" : "string",
          "description" : "An message indicating the reason of the failure."
        },
        "errorDetails" : {
          "type" : "string",
          "description" : "A detailed error description."
        },
        "retryTimeout" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A timeout in milliseconds before the external task becomes available again for fetching. Must be >= 0."
        },
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "A number of how often the task should be retried. Must be >= 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. The incident's message is set to the errorMessage parameter."
        }
      }
    },
    "ExternalTaskQueryDto" : {
      "type" : "object",
      "properties" : {
        "processDefinitionId" : {
          "type" : "string",
          "description" : "Filter by the id of the process definition that an external task belongs to."
        },
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "FetchExternalTaskTopicDto" : {
      "type" : "object",
      "properties" : {
        "topicName" : {
          "type" : "string"
        },
        "lockDuration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "variables" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "deserializeValues" : {
          "type" : "boolean"
        }
      }
    },
    "FetchExternalTasksDto" : {
      "type" : "object",
      "properties" : {
        "maxTasks" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Mandatory. The maximum number of tasks to return."
        },
        "workerId" : {
          "type" : "string",
          "description" : "Mandatory. The id of the worker on which behalf tasks are fetched. The returned tasks are locked for that worker and can only be completed when providing the same worker id."
        },
        "usePriority" : {
          "type" : "boolean"
        },
        "topics" : {
          "type" : "array",
          "description" : "A JSON array of topic objects for which external tasks should be fetched. The returned tasks may be arbitrarily distributed among these topics. Each topic object has the following properties: Name Description topicName Mandatory. The topic's name. lockDuration Mandatory. The duration to lock the external tasks for in milliseconds. variables A JSON array of String values that represent variable names. For each result task belonging to this topic, the given variables are returned as well if they are accessible from the external task's execution. If not provided - all variables will be fetched. deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default false).",
          "items" : {
            "$ref" : "#/definitions/FetchExternalTaskTopicDto"
          }
        }
      }
    },
    "FilterDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the filter."
        },
        "resourceType" : {
          "type" : "string",
          "description" : "The resource type of the filter, e.g., Task."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the filter."
        },
        "owner" : {
          "type" : "string",
          "description" : "The user id of the owner of the filter."
        },
        "query" : {
          "description" : "The save query of the filter as JSON object.",
          "$ref" : "#/definitions/AbstractQueryDtoObject"
        },
        "properties" : {
          "type" : "object",
          "description" : "The properties of the filter as JSON object.",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "itemCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of items matched by the filter itself. Note: Only exists if the query parameter itemCount was set to true"
        }
      }
    },
    "FormDto" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "The form key for the task."
        },
        "contextPath" : {
          "type" : "string",
          "description" : "The process application's context path the task belongs to. If the task does not belong to a process application deployment or a process definition at all, this property is not set."
        }
      }
    },
    "GroupDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "GroupInfoDto" : {
      "type" : "object",
      "properties" : {
        "groups" : {
          "type" : "array",
          "description" : "A JSON array of group object. Every group object has a id property and a name property.",
          "items" : {
            "$ref" : "#/definitions/GroupDto"
          }
        },
        "groupUsers" : {
          "type" : "array",
          "description" : "A JSON array that contains all users that are member in one of the groups. Every user object has four properties: id, firstName, lastName and displayName. The displayName is the id, if firstName and lastName are null and firstName lastName otherwise.",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/UserDto"
          }
        }
      }
    },
    "HistoricProcessInstanceQueryDto" : {
      "type" : "object",
      "properties" : {
        "processDefinitionId" : {
          "type" : "string",
          "description" : "Filter by the process definition the instances run on."
        },
        "incidentType" : {
          "type" : "string",
          "description" : "Filter by the incident type. See the User Guide for a list of incident types."
        },
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "HistoryTimeToLiveDto" : {
      "type" : "object",
      "properties" : {
        "historyTimeToLive" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "New value for historyTimeToLive field of decision definition. Can be null. Can not be negative."
        }
      }
    },
    "IdentityLinkDto" : {
      "type" : "object",
      "properties" : {
        "userId" : {
          "type" : "string",
          "description" : "The id of the user to link to the task. If you set this parameter, you have to omit groupId."
        },
        "groupId" : {
          "type" : "string",
          "description" : "The id of the group to link to the task. If you set this parameter, you have to omit userId."
        },
        "type" : {
          "type" : "string",
          "description" : "Sets the type of the link. Must be provided."
        }
      }
    },
    "IncidentDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "processDefinitionId" : {
          "type" : "string"
        },
        "processInstanceId" : {
          "type" : "string"
        },
        "executionId" : {
          "type" : "string"
        },
        "incidentTimestamp" : {
          "type" : "string",
          "format" : "date-time"
        },
        "incidentType" : {
          "type" : "string"
        },
        "activityId" : {
          "type" : "string"
        },
        "causeIncidentId" : {
          "type" : "string"
        },
        "rootCauseIncidentId" : {
          "type" : "string"
        },
        "configuration" : {
          "type" : "string"
        },
        "incidentMessage" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "jobDefinitionId" : {
          "type" : "string"
        }
      }
    },
    "InputStream" : {
      "type" : "object"
    },
    "JobDefinitionDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the job definition."
        },
        "processDefinitionId" : {
          "type" : "string",
          "description" : "The id of the process definition this job definition is associated with."
        },
        "processDefinitionKey" : {
          "type" : "string",
          "description" : "The key of the process definition this job definition is associated with."
        },
        "jobType" : {
          "type" : "string",
          "description" : "The type of the job which is running for this job definition. See the User Guide for more information about job types."
        },
        "jobConfiguration" : {
          "type" : "string",
          "description" : "The context of a job definition provides details about the jobs which will be created. For example: for timer jobs it is the timer context."
        },
        "activityId" : {
          "type" : "string",
          "description" : "The id of the activity this job definition is associated with."
        },
        "suspended" : {
          "type" : "boolean"
        },
        "overridingJobPriority" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The execution priority defined for jobs that are created based on this definition. May be null when the priority has not been overridden on the job definition level."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The id of the tenant this job definition is associated with."
        }
      }
    },
    "JobDefinitionPriorityDto" : {
      "type" : "object",
      "properties" : {
        "priority" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The new execution priority number for jobs of the given definition. The definition's priority can be reset by using the value null. In that case, the job definition's priority no longer applies but a new job's priority is determined as specified in the process model."
        },
        "includeJobs" : {
          "type" : "boolean"
        }
      }
    },
    "JobDefinitionQueryDto" : {
      "type" : "object",
      "properties" : {
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "JobDefinitionSuspensionStateDto" : {
      "type" : "object",
      "properties" : {
        "suspended" : {
          "type" : "boolean",
          "description" : "A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated."
        },
        "jobDefinitionId" : {
          "type" : "string"
        }
      }
    },
    "JobDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the job."
        },
        "jobDefinitionId" : {
          "type" : "string",
          "description" : "The id of the associated job definition."
        },
        "processInstanceId" : {
          "type" : "string",
          "description" : "The id of the process instance which execution created the job."
        },
        "processDefinitionId" : {
          "type" : "string",
          "description" : "The id of the process definition which this job belongs to."
        },
        "processDefinitionKey" : {
          "type" : "string",
          "description" : "The key of the process definition which this job belongs to."
        },
        "executionId" : {
          "type" : "string",
          "description" : "The specific execution id on which the job was created."
        },
        "exceptionMessage" : {
          "type" : "string",
          "description" : "The message of the exception that occurred, the last time the job was executed. Is null when no exception occurred."
        },
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of retries this job has left."
        },
        "dueDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date on which this job is supposed to be processed."
        },
        "suspended" : {
          "type" : "boolean"
        },
        "priority" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The job's priority for execution."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The id of the tenant which this job belongs to."
        }
      }
    },
    "JobDuedateDto" : {
      "type" : "object",
      "properties" : {
        "duedate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date to set when the job has the next execution."
        }
      }
    },
    "JobQueryDto" : {
      "type" : "object",
      "properties" : {
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "JobSuspensionStateDto" : {
      "type" : "object",
      "properties" : {
        "suspended" : {
          "type" : "boolean",
          "description" : "A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated."
        },
        "jobId" : {
          "type" : "string"
        }
      }
    },
    "MigrationExecutionDto" : {
      "type" : "object",
      "properties" : {
        "migrationPlan" : {
          "description" : "The migration plan to execute. A JSON object corresponding to the migration plan interface in the engine as explained below.",
          "$ref" : "#/definitions/MigrationPlanDto"
        },
        "processInstanceIds" : {
          "type" : "array",
          "description" : "A list of process instance ids to migrate.",
          "items" : {
            "type" : "string"
          }
        },
        "processInstanceQuery" : {
          "description" : "A process instance query like the request body described by POST /process-instance .",
          "$ref" : "#/definitions/ProcessInstanceQueryDto"
        },
        "skipIoMappings" : {
          "type" : "boolean"
        },
        "skipCustomListeners" : {
          "type" : "boolean"
        }
      }
    },
    "MigrationInstructionDto" : {
      "type" : "object",
      "properties" : {
        "sourceActivityIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "targetActivityIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "updateEventTrigger" : {
          "type" : "boolean"
        }
      }
    },
    "MigrationInstructionValidationReportDto" : {
      "type" : "object",
      "properties" : {
        "instruction" : {
          "$ref" : "#/definitions/MigrationInstructionDto"
        },
        "failures" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "MigrationPlanDto" : {
      "type" : "object",
      "properties" : {
        "sourceProcessDefinitionId" : {
          "type" : "string",
          "description" : "The id of the source process definition for the migration."
        },
        "targetProcessDefinitionId" : {
          "type" : "string",
          "description" : "The id of the target process definition for the migration."
        },
        "instructions" : {
          "type" : "array",
          "description" : "A list of migration instructions which map equal activities. Each migration instruction is a JSON object with the following properties: Name Value Description sourceActivityIds Array The activity ids from the source process definition being mapped. targetActivityIds Array The activity ids from the target process definition being mapped. updateEventTrigger Boolean Configuration flag whether event triggers defined are going to be updated during migration.",
          "items" : {
            "$ref" : "#/definitions/MigrationInstructionDto"
          }
        }
      }
    },
    "MigrationPlanGenerationDto" : {
      "type" : "object",
      "properties" : {
        "sourceProcessDefinitionId" : {
          "type" : "string",
          "description" : "The id of the source process definition for the migration."
        },
        "targetProcessDefinitionId" : {
          "type" : "string",
          "description" : "The id of the target process definition for the migration."
        },
        "updateEventTriggers" : {
          "type" : "boolean"
        }
      }
    },
    "MigrationPlanReportDto" : {
      "type" : "object",
      "properties" : {
        "instructionReports" : {
          "type" : "array",
          "description" : "The list of instruction validation reports. If no validation errors are detected it is an empty list.",
          "items" : {
            "$ref" : "#/definitions/MigrationInstructionValidationReportDto"
          }
        }
      }
    },
    "ModificationDto" : {
      "type" : "object",
      "properties" : {
        "instructions" : {
          "type" : "array",
          "description" : "A JSON array of modification instructions. The instructions are executed in the order they are in. An instruction may have the following properties: type Mandatory. One of the following values: cancel, startBeforeActivity, startAfterActivity, startTransition. A startBeforeActivity and cancel instructions request to enter a given activity. A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. A startTransition instruction requests to execute a specific sequence flow. activityId Can be used with instructions of types startBeforeActivity, startAfterActivity, and cancel. Specifies the activity the instruction targets. transitionId Can be used with instructions of types startTransition. Specifies the sequence flow to start.",
          "items" : {
            "$ref" : "#/definitions/ProcessInstanceModificationInstructionDto"
          }
        },
        "processInstanceIds" : {
          "type" : "array",
          "description" : "A list of process instance ids to modify.",
          "items" : {
            "type" : "string"
          }
        },
        "processInstanceQuery" : {
          "description" : "A process instance query like the request body described by POST /process-instance .",
          "$ref" : "#/definitions/ProcessInstanceQueryDto"
        },
        "processDefinitionId" : {
          "type" : "string",
          "description" : "The id of the process definition for the modification"
        },
        "skipIoMappings" : {
          "type" : "boolean"
        },
        "skipCustomListeners" : {
          "type" : "boolean"
        }
      }
    },
    "MultipartFormData" : {
      "type" : "object",
      "properties" : {
        "partNames" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PatchVariablesDto" : {
      "type" : "object",
      "properties" : {
        "modifications" : {
          "type" : "object",
          "description" : "A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        },
        "deletions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PriorityDto" : {
      "type" : "object",
      "properties" : {
        "priority" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The new execution priority number for the job."
        }
      }
    },
    "ProcessDefinitionDiagramDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the process definition."
        },
        "bpmn20Xml" : {
          "type" : "string",
          "description" : "An escaped XML string containing the XML that this definition was deployed with. Carriage returns, line feeds and quotation marks are escaped."
        }
      }
    },
    "ProcessDefinitionDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the process definition."
        },
        "key" : {
          "type" : "string",
          "description" : "The key of the process definition, i.e., the id of the BPMN 2.0 XML process definition."
        },
        "category" : {
          "type" : "string",
          "description" : "The category of the process definition."
        },
        "description" : {
          "type" : "string",
          "description" : "The description of the process definition."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the process definition."
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version of the process definition that the engine assigned to it."
        },
        "resource" : {
          "type" : "string",
          "description" : "The file name of the process definition."
        },
        "deploymentId" : {
          "type" : "string",
          "description" : "The deployment id of the process definition."
        },
        "diagram" : {
          "type" : "string",
          "description" : "The file name of the process definition diagram, if it exists."
        },
        "suspended" : {
          "type" : "boolean"
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The tenant id of the process definition."
        },
        "versionTag" : {
          "type" : "string",
          "description" : "The version tag of the process definition."
        },
        "historyTimeToLive" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "History time to live value of the process definition. Is used within History cleanup."
        }
      }
    },
    "ProcessDefinitionSuspensionStateDto" : {
      "type" : "object",
      "properties" : {
        "suspended" : {
          "type" : "boolean",
          "description" : "A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated."
        },
        "processDefinitionId" : {
          "type" : "string"
        }
      }
    },
    "ProcessInstanceDto" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AtomLink"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the process instance."
        },
        "definitionId" : {
          "type" : "string",
          "description" : "The id of the process definition this instance belongs to."
        },
        "businessKey" : {
          "type" : "string",
          "description" : "The business key of the process instance."
        },
        "caseInstanceId" : {
          "type" : "string",
          "description" : "The id of the case instance associated with the process instance."
        },
        "ended" : {
          "type" : "boolean"
        },
        "suspended" : {
          "type" : "boolean"
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The tenant id of the process instance."
        }
      }
    },
    "ProcessInstanceModificationDto" : {
      "type" : "object",
      "properties" : {
        "skipCustomListeners" : {
          "type" : "boolean"
        },
        "skipIoMappings" : {
          "type" : "boolean"
        },
        "instructions" : {
          "type" : "array",
          "description" : "A JSON array of modification instructions. The instructions are executed in the order they are in. An instruction may have the following properties: type Mandatory. One of the following values: cancel, startBeforeActivity, startAfterActivity, startTransition. A cancel instruction requests cancellation of a single activity instance or all instances of one activity. A startBeforeActivity instruction requests to enter a given activity. A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. A startTransition instruction requests to execute a specific sequence flow. activityId Can be used with instructions of types startBeforeActivity, startAfterActivity, and cancel. Specifies the activity the instruction targets. transitionId Can be used with instructions of types startTransition. Specifies the sequence flow to start. activityInstanceId Can be used with instructions of type cancel. Specifies the activity instance to cancel. Valid values are the activity instance IDs supplied by the Get Activity Instance request. transitionInstanceId Can be used with instructions of type cancel. Specifies the transition instance to cancel. Valid values are the transition instance IDs supplied by the Get Activity Instance request. ancestorActivityInstanceId Can be used with instructions of type startBeforeActivity, startAfterActivity, and startTransition. Valid values are the activity instance IDs supplied by the Get Activity Instance request. If there are multiple parent activity instances of the targeted activity, this specifies the ancestor scope in which hierarchy the activity/transition is to be instantiated. Example: When there are two instances of a subprocess and an activity contained in the subprocess is to be started, this parameter allows to specifiy under which subprocess instance the activity should be started. variables Can be used with instructions of type startBeforeActivity, startAfterActivity, and startTransition. A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object.",
          "items" : {
            "$ref" : "#/definitions/ProcessInstanceModificationInstructionDto"
          }
        }
      }
    },
    "ProcessInstanceModificationInstructionDto" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "variables" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/TriggerVariableValueDto"
          }
        },
        "activityId" : {
          "type" : "string"
        },
        "transitionId" : {
          "type" : "string"
        },
        "activityInstanceId" : {
          "type" : "string"
        },
        "transitionInstanceId" : {
          "type" : "string"
        },
        "ancestorActivityInstanceId" : {
          "type" : "string"
        },
        "cancelCurrentActiveActivityInstances" : {
          "type" : "boolean"
        }
      }
    },
    "ProcessInstanceQueryDto" : {
      "type" : "object",
      "properties" : {
        "deploymentId" : {
          "type" : "string",
          "description" : "Filter by the deployment the id belongs to."
        },
        "processDefinitionKey" : {
          "type" : "string",
          "description" : "Filter by the key of the process definition the instances run on."
        },
        "businessKey" : {
          "type" : "string",
          "description" : "Filter by process instance business key."
        },
        "businessKeyLike" : {
          "type" : "string",
          "description" : "Filter by process instance business key that the parameter is a substring of."
        },
        "caseInstanceId" : {
          "type" : "string",
          "description" : "Filter by case instance id."
        },
        "processDefinitionId" : {
          "type" : "string",
          "description" : "Filter by the process definition the instances run on."
        },
        "superProcessInstance" : {
          "type" : "string",
          "description" : "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id."
        },
        "subProcessInstance" : {
          "type" : "string",
          "description" : "Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id."
        },
        "superCaseInstance" : {
          "type" : "string",
          "description" : "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id."
        },
        "subCaseInstance" : {
          "type" : "string",
          "description" : "Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id."
        },
        "active" : {
          "type" : "boolean"
        },
        "suspended" : {
          "type" : "boolean"
        },
        "processInstanceIds" : {
          "type" : "array",
          "description" : "Filter by a list of process instance ids. Must be a JSON array of Strings.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "incidentId" : {
          "type" : "string",
          "description" : "Filter by the incident id."
        },
        "incidentType" : {
          "type" : "string",
          "description" : "Filter by the incident type. See the User Guide for a list of incident types."
        },
        "incidentMessage" : {
          "type" : "string",
          "description" : "Filter by the incident message. Exact match."
        },
        "incidentMessageLike" : {
          "type" : "string",
          "description" : "Filter by the incident message that the parameter is a substring of."
        },
        "withoutTenantId" : {
          "type" : "boolean"
        },
        "activityIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "variables" : {
          "type" : "array",
          "description" : "A JSON array to only include process instances that have variables with certain values. The array consists of objects with the three properties key, operator and value. key (String) is the variable name, operator (String) is the comparison operator to be used and value the variable value. value may be String, Number or Boolean. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like.",
          "items" : {
            "$ref" : "#/definitions/VariableQueryParameterDto"
          }
        },
        "tenantIdIn" : {
          "type" : "array",
          "description" : "Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.",
          "items" : {
            "type" : "string"
          }
        },
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "ProcessInstanceSuspensionStateDto" : {
      "type" : "object",
      "properties" : {
        "suspended" : {
          "type" : "boolean",
          "description" : "A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated."
        },
        "processInstanceId" : {
          "type" : "string"
        },
        "processInstanceQuery" : {
          "$ref" : "#/definitions/ProcessInstanceQueryDto"
        },
        "historicProcessInstanceQuery" : {
          "$ref" : "#/definitions/HistoricProcessInstanceQueryDto"
        }
      }
    },
    "RedeploymentDto" : {
      "type" : "object",
      "properties" : {
        "source" : {
          "type" : "string",
          "description" : "Sets the source of the deployment."
        },
        "resourceIds" : {
          "type" : "array",
          "description" : "A list of deployment resource ids to re-deploy.",
          "items" : {
            "type" : "string"
          }
        },
        "resourceNames" : {
          "type" : "array",
          "description" : "A list of deployment resource names to re-deploy.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ResourceOptionsDto" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AtomLink"
          }
        }
      }
    },
    "RetriesDto" : {
      "type" : "object",
      "properties" : {
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of retries to set that a job has left."
        }
      }
    },
    "SetJobRetriesByProcessDto" : {
      "type" : "object",
      "properties" : {
        "processInstances" : {
          "type" : "array",
          "description" : "A list of process instance ids to fetch jobs, for which retries will be set.",
          "items" : {
            "type" : "string"
          }
        },
        "processInstanceQuery" : {
          "description" : "A process instance query like the request body for the Get Instances (POST) method.",
          "$ref" : "#/definitions/ProcessInstanceQueryDto"
        },
        "historicProcessInstanceQuery" : {
          "description" : "A historic process instance query like the request body described by POST /history/process-instance .",
          "$ref" : "#/definitions/HistoricProcessInstanceQueryDto"
        },
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "An integer representing the number of retries. Please note that the value cannot be negative or null."
        }
      }
    },
    "SetJobRetriesDto" : {
      "type" : "object",
      "properties" : {
        "jobIds" : {
          "type" : "array",
          "description" : "A list of job ids to set retries for.",
          "items" : {
            "type" : "string"
          }
        },
        "jobQuery" : {
          "description" : "A job query like the request body for the Get Jobs (POST) method.",
          "$ref" : "#/definitions/JobQueryDto"
        },
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "An integer representing the number of retries. Please note that the value cannot be negative or null."
        }
      }
    },
    "SetRetriesForExternalTasksDto" : {
      "type" : "object",
      "properties" : {
        "externalTaskIds" : {
          "type" : "array",
          "description" : "The ids of the external tasks to set the number of retries for.",
          "items" : {
            "type" : "string"
          }
        },
        "processInstanceIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "externalTaskQuery" : {
          "description" : "Query for the external tasks to set the number of retries for.",
          "$ref" : "#/definitions/ExternalTaskQueryDto"
        },
        "processInstanceQuery" : {
          "$ref" : "#/definitions/ProcessInstanceQueryDto"
        },
        "historicProcessInstanceQuery" : {
          "$ref" : "#/definitions/HistoricProcessInstanceQueryDto"
        },
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of retries to set for the external task. Must be >= 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again."
        }
      }
    },
    "SortingDto" : {
      "type" : "object",
      "properties" : {
        "sortBy" : {
          "type" : "string"
        },
        "sortOrder" : {
          "type" : "string"
        },
        "parameters" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "StartAfterInstructionDto" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ProcessInstanceModificationInstructionDto"
      }, {
        "type" : "object"
      } ]
    },
    "StartBeforeInstructionDto" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ProcessInstanceModificationInstructionDto"
      }, {
        "type" : "object"
      } ]
    },
    "StartProcessInstanceDto" : {
      "type" : "object",
      "properties" : {
        "variables" : {
          "type" : "object",
          "description" : "A JSON object containing the variables the process is to be initialized with. Each key corresponds to a variable name and each value to a variable value. A variable value is a JSON object with the following properties:",
          "additionalProperties" : {
            "$ref" : "#/definitions/VariableValueDto"
          }
        },
        "businessKey" : {
          "type" : "string"
        },
        "caseInstanceId" : {
          "type" : "string"
        },
        "startInstructions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProcessInstanceModificationInstructionDto"
          }
        },
        "skipCustomListeners" : {
          "type" : "boolean"
        },
        "skipIoMappings" : {
          "type" : "boolean"
        },
        "withVariablesInReturn" : {
          "type" : "boolean"
        }
      }
    },
    "StartTransitionInstructionDto" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ProcessInstanceModificationInstructionDto"
      }, {
        "type" : "object"
      } ]
    },
    "SuspensionStateDto" : {
      "type" : "object",
      "properties" : {
        "suspended" : {
          "type" : "boolean",
          "description" : "A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated."
        }
      }
    },
    "TaskDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the task."
        },
        "name" : {
          "type" : "string",
          "description" : "The task name."
        },
        "assignee" : {
          "type" : "string",
          "description" : "The user to assign to this task."
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "due" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The due date for the task. Format yyyy-MM-dd'T'HH:mm:ss."
        },
        "followUp" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The follow-up date for the task. Format yyyy-MM-dd'T'HH:mm:ss."
        },
        "delegationState" : {
          "type" : "string",
          "description" : "The delegation state of the task. Corresponds to the DelegationState enum in the engine. Possible values are RESOLVED and PENDING."
        },
        "description" : {
          "type" : "string",
          "description" : "The task description."
        },
        "executionId" : {
          "type" : "string"
        },
        "owner" : {
          "type" : "string",
          "description" : "The owner of the task."
        },
        "parentTaskId" : {
          "type" : "string",
          "description" : "The id of the parent task, if this task is a subtask."
        },
        "priority" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The priority of the task."
        },
        "processDefinitionId" : {
          "type" : "string"
        },
        "processInstanceId" : {
          "type" : "string"
        },
        "taskDefinitionKey" : {
          "type" : "string"
        },
        "caseExecutionId" : {
          "type" : "string"
        },
        "caseInstanceId" : {
          "type" : "string",
          "description" : "The id of the case instance the task belongs to."
        },
        "caseDefinitionId" : {
          "type" : "string"
        },
        "suspended" : {
          "type" : "boolean"
        },
        "formKey" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The id of the tenant the task belongs to."
        }
      }
    },
    "TaskQueryDto" : {
      "type" : "object",
      "properties" : {
        "processInstanceBusinessKey" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to process instances with the given business key."
        },
        "processInstanceBusinessKeyExpression" : {
          "type" : "string"
        },
        "processInstanceBusinessKeyIn" : {
          "type" : "array",
          "description" : "Restrict to tasks that belong to process instances with one of the give business keys. The keys need to be in a comma-separated list.",
          "items" : {
            "type" : "string"
          }
        },
        "processInstanceBusinessKeyLike" : {
          "type" : "string",
          "description" : "Restrict to tasks that have a process instance business key that has the parameter value as a substring."
        },
        "processInstanceBusinessKeyLikeExpression" : {
          "type" : "string"
        },
        "processDefinitionKey" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to a process definition with the given key."
        },
        "processDefinitionKeyIn" : {
          "type" : "array",
          "description" : "Restrict to tasks that belong to a process definition with one of the given keys. The keys need to be in a comma-separated list.",
          "items" : {
            "type" : "string"
          }
        },
        "processDefinitionId" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to a process definition with the given id."
        },
        "executionId" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to an execution with the given id."
        },
        "activityInstanceIdIn" : {
          "type" : "array",
          "description" : "Only include tasks which belong to one of the passed activity instance ids.",
          "items" : {
            "type" : "string"
          }
        },
        "processDefinitionName" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to a process definition with the given name."
        },
        "processDefinitionNameLike" : {
          "type" : "string",
          "description" : "Restrict to tasks that have a process definition name that has the parameter value as a substring."
        },
        "processInstanceId" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to process instances with the given id."
        },
        "assignee" : {
          "type" : "string",
          "description" : "Restrict to tasks that the given user is assigned to."
        },
        "assigneeExpression" : {
          "type" : "string",
          "description" : "Restrict to tasks that the user described by the given expression is assigned to. See the user guide for more information on available functions."
        },
        "assigneeLike" : {
          "type" : "string",
          "description" : "Restrict to tasks that have an assignee that has the parameter value as a substring."
        },
        "assigneeLikeExpression" : {
          "type" : "string",
          "description" : "Restrict to tasks that have an assignee that has the parameter value described by the given expression as a substring. See the user guide for more information on available functions."
        },
        "candidateGroup" : {
          "type" : "string",
          "description" : "Only include tasks that are offered to the given group."
        },
        "candidateGroupExpression" : {
          "type" : "string",
          "description" : "Only include tasks that are offered to the group described by the given expression. See the user guide for more information on available functions."
        },
        "candidateUser" : {
          "type" : "string",
          "description" : "Only include tasks that are offered to the given user or to one of his groups."
        },
        "candidateUserExpression" : {
          "type" : "string",
          "description" : "Only include tasks that are offered to the user described by the given expression. See the user guide for more information on available functions."
        },
        "includeAssignedTasks" : {
          "type" : "boolean",
          "description" : "Also include tasks that are assigned to users in candidate queries. Default is to only include tasks that are not assigned to any user if you query by candidate user or group(s)."
        },
        "taskDefinitionKey" : {
          "type" : "string"
        },
        "taskDefinitionKeyIn" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "taskDefinitionKeyLike" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "descriptionLike" : {
          "type" : "string"
        },
        "involvedUser" : {
          "type" : "string",
          "description" : "Only include tasks that the given user is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee)."
        },
        "involvedUserExpression" : {
          "type" : "string",
          "description" : "Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the user guide for more information on available functions."
        },
        "maxPriority" : {
          "type" : "integer",
          "format" : "int32"
        },
        "minPriority" : {
          "type" : "integer",
          "format" : "int32"
        },
        "name" : {
          "type" : "string"
        },
        "nameNotEqual" : {
          "type" : "string"
        },
        "nameLike" : {
          "type" : "string"
        },
        "nameNotLike" : {
          "type" : "string"
        },
        "owner" : {
          "type" : "string",
          "description" : "Restrict to tasks that the given user owns."
        },
        "ownerExpression" : {
          "type" : "string",
          "description" : "Restrict to tasks that the user described by the given expression owns. See the user guide for more information on available functions."
        },
        "priority" : {
          "type" : "integer",
          "format" : "int32"
        },
        "parentTaskId" : {
          "type" : "string"
        },
        "unassigned" : {
          "type" : "boolean",
          "description" : "If set to true, restricts the query to all tasks that are unassigned."
        },
        "active" : {
          "type" : "boolean"
        },
        "suspended" : {
          "type" : "boolean"
        },
        "caseDefinitionKey" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to a case definition with the given key."
        },
        "caseDefinitionId" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to a case definition with the given id."
        },
        "caseDefinitionName" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to a case definition with the given name."
        },
        "caseDefinitionNameLike" : {
          "type" : "string",
          "description" : "Restrict to tasks that have a case definition name that has the parameter value as a substring."
        },
        "caseInstanceId" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to case instances with the given id."
        },
        "caseInstanceBusinessKey" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to case instances with the given business key."
        },
        "caseInstanceBusinessKeyLike" : {
          "type" : "string",
          "description" : "Restrict to tasks that have a case instance business key that has the parameter value as a substring."
        },
        "caseExecutionId" : {
          "type" : "string",
          "description" : "Restrict to tasks that belong to a case execution with the given id."
        },
        "dueAfter" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dueAfterExpression" : {
          "type" : "string"
        },
        "dueBefore" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dueBeforeExpression" : {
          "type" : "string"
        },
        "dueDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dueDateExpression" : {
          "type" : "string"
        },
        "followUpAfter" : {
          "type" : "string",
          "format" : "date-time"
        },
        "followUpAfterExpression" : {
          "type" : "string"
        },
        "followUpBefore" : {
          "type" : "string",
          "format" : "date-time"
        },
        "followUpBeforeExpression" : {
          "type" : "string"
        },
        "followUpBeforeOrNotExistent" : {
          "type" : "string",
          "format" : "date-time"
        },
        "followUpBeforeOrNotExistentExpression" : {
          "type" : "string"
        },
        "followUpDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "followUpDateExpression" : {
          "type" : "string"
        },
        "createdAfter" : {
          "type" : "string",
          "format" : "date-time"
        },
        "createdAfterExpression" : {
          "type" : "string"
        },
        "createdBefore" : {
          "type" : "string",
          "format" : "date-time"
        },
        "createdBeforeExpression" : {
          "type" : "string"
        },
        "createdOn" : {
          "type" : "string",
          "format" : "date-time"
        },
        "createdOnExpression" : {
          "type" : "string"
        },
        "delegationState" : {
          "type" : "string"
        },
        "tenantIdIn" : {
          "type" : "array",
          "description" : "Restrict to tasks that belong to one of the given tenant ids. The ids need to be in a comma-separated list.",
          "items" : {
            "type" : "string"
          }
        },
        "withoutTenantId" : {
          "type" : "boolean",
          "description" : "Only include tasks which belong to no tenant. Value may only be true, as false is the default behavior."
        },
        "candidateGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "candidateGroupsExpression" : {
          "type" : "string"
        },
        "taskVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VariableQueryParameterDto"
          }
        },
        "processVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VariableQueryParameterDto"
          }
        },
        "caseInstanceVariables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VariableQueryParameterDto"
          }
        },
        "orQueries" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TaskQueryDto"
          }
        },
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "TenantDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the tenant."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the tenant."
        }
      }
    },
    "TransitionInstanceDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "parentActivityInstanceId" : {
          "type" : "string"
        },
        "processInstanceId" : {
          "type" : "string"
        },
        "processDefinitionId" : {
          "type" : "string"
        },
        "activityId" : {
          "type" : "string"
        },
        "activityName" : {
          "type" : "string"
        },
        "activityType" : {
          "type" : "string"
        },
        "executionId" : {
          "type" : "string"
        },
        "targetActivityId" : {
          "type" : "string"
        }
      }
    },
    "TriggerVariableValueDto" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "value" : {
          "type" : "object"
        },
        "valueInfo" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "local" : {
          "type" : "boolean"
        }
      }
    },
    "UserCredentialsDto" : {
      "type" : "object",
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : "The user's new password."
        },
        "authenticatedUserPassword" : {
          "type" : "string",
          "description" : "The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter)."
        }
      }
    },
    "UserDto" : {
      "type" : "object",
      "properties" : {
        "profile" : {
          "description" : "A JSON object containing variable key-value pairs. The object contains the following properties: id (String), firstName (String), lastName (String) and email (String).",
          "$ref" : "#/definitions/UserProfileDto"
        },
        "credentials" : {
          "description" : "A JSON object containing variable key-value pairs. The object contains the following property: password (String).",
          "$ref" : "#/definitions/UserCredentialsDto"
        }
      }
    },
    "UserIdDto" : {
      "type" : "object",
      "properties" : {
        "userId" : {
          "type" : "string",
          "description" : "The id of the user that claims the task."
        }
      }
    },
    "UserProfileDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the user."
        },
        "firstName" : {
          "type" : "string",
          "description" : "The firstname of the user."
        },
        "lastName" : {
          "type" : "string",
          "description" : "The lastname of the user."
        },
        "email" : {
          "type" : "string",
          "description" : "The email of the user."
        }
      }
    },
    "VariableInstanceDto" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "value" : {
          "type" : "object"
        },
        "valueInfo" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the variable instance."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the variable instance."
        },
        "processInstanceId" : {
          "type" : "string",
          "description" : "The id of the process instance that this variable instance belongs to."
        },
        "executionId" : {
          "type" : "string",
          "description" : "The id of the execution that this variable instance belongs to."
        },
        "caseInstanceId" : {
          "type" : "string",
          "description" : "The id of the case instance that this variable instance belongs to."
        },
        "caseExecutionId" : {
          "type" : "string",
          "description" : "The id of the case execution that this variable instance belongs to."
        },
        "taskId" : {
          "type" : "string",
          "description" : "The id of the task that this variable instance belongs to."
        },
        "activityInstanceId" : {
          "type" : "string",
          "description" : "The id of the activity instance that this variable instance belongs to."
        },
        "errorMessage" : {
          "type" : "string",
          "description" : "An error message in case a Java Serialized Object could not be de-serialized."
        },
        "tenantId" : {
          "type" : "string",
          "description" : "The id of the tenant that this variable instance belongs to."
        }
      }
    },
    "VariableInstanceQueryDto" : {
      "type" : "object",
      "properties" : {
        "sorting" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SortingDto"
          }
        }
      }
    },
    "VariableNameDto" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "local" : {
          "type" : "boolean"
        }
      }
    },
    "VariableQueryParameterDto" : {
      "type" : "object",
      "properties" : {
        "operator" : {
          "type" : "string"
        },
        "value" : {
          "type" : "object"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "VariableValueDto" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "value" : {
          "type" : "object"
        },
        "valueInfo" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    }
  }
}
